{"identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUICore","interfaceLanguage":"swift"},"metadata":{"role":"article","modules":[{"name":"AudioUI"}],"roleHeading":"Article","title":"AudioUICore Module"},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"AudioUICore contains the essential building blocks for audio interfaces - fundamental controls that prioritize functionality over visual styling. These primitives form the foundation that all AudioUI components build upon."}],"type":"paragraph"},{"inlineContent":[{"text":"Think of AudioUICore as the “raw materials” for building audio interfaces. While they’re functional and precise, they focus on core behavior rather than visual design.","type":"text"}],"type":"paragraph"},{"anchor":"Core-Primitives","level":2,"text":"Core Primitives","type":"heading"},{"anchor":"Knob-Primitive","level":3,"text":"Knob Primitive","type":"heading"},{"inlineContent":[{"type":"text","text":"The fundamental rotary control for continuous parameters:"}],"type":"paragraph"},{"syntax":"swift","code":["import AudioUICore","","struct BasicKnob: View {","    @State private var frequency: Double = 0.5","    ","    var body: some View {","        Knob(value: $frequency) { newValue in","            \/\/ Direct audio parameter control","            audioEngine.setFrequency(newValue * 20000) \/\/ Scale to 0-20kHz","        }","        .frame(width: 60, height: 60)","    }","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"Key Features:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Precise gesture recognition for fine control"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Configurable value ranges and step sizes","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Real-time value change callbacks","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Optimized for 60fps interaction"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"Best For:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Frequency controls (oscillators, filters)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Gain and volume controls"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Time-based parameters (delay, attack, release)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any continuous parameter without clear boundaries"}]}]}],"type":"unorderedList"},{"anchor":"Fader-Primitive","level":3,"text":"Fader Primitive","type":"heading"},{"inlineContent":[{"text":"Linear control optimized for level-based parameters:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicFader: View {","    @State private var channelLevel: Double = 0.75","    ","    var body: some View {","        Fader(","            value: $channelLevel,","            orientation: .vertical","        ) { newLevel in","            mixer.setChannelLevel(newLevel)","        }","        .frame(width: 40, height: 200)","    }","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"Key Features:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Vertical and horizontal orientations","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Linear value mapping (perfect for decibel scales)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Touch-optimized gesture handling","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Professional mixing console feel","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Best For:"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Channel levels and mix controls"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Send and return amounts","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Crossfader controls","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Any parameter with clear minimum\/maximum boundaries"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"XYPad-Primitive","level":3,"text":"XYPad Primitive","type":"heading"},{"inlineContent":[{"text":"Two-dimensional control surface for parameter pairs:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicXYPad: View {","    @State private var filterParams = CGPoint(x: 0.5, y: 0.3)","    ","    var body: some View {","        XYPad(value: $filterParams) { newPosition in","            let cutoff = newPosition.x * 20000    \/\/ 0-20kHz","            let resonance = newPosition.y * 10     \/\/ 0-10 Q factor","            filter.setParameters(cutoff: cutoff, resonance: resonance)","        }","        .frame(width: 200, height: 200)","    }","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"text":"Key Features:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Simultaneous two-parameter control"}]}]},{"content":[{"inlineContent":[{"text":"Configurable coordinate mapping","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Visual position indicators","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Precise touch tracking"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Best For:"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Filter cutoff\/resonance control"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Spatial audio positioning"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Delay time\/feedback combinations"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Any two related parameters","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"PadButton-Primitive","level":3,"text":"PadButton Primitive","type":"heading"},{"inlineContent":[{"type":"text","text":"Velocity-sensitive trigger for percussive controls:"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicDrumPad: View {","    var body: some View {","        PadButton { velocity in","            drumMachine.trigger(.kick, velocity: velocity)","        }","        .frame(width: 80, height: 80)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Key Features:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Velocity-sensitive triggering"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple trigger modes (momentary, toggle, latching)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Configurable velocity curves","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Real-time tactile feedback"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Best For:"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Drum machine interfaces"}]}]},{"content":[{"inlineContent":[{"text":"Sample triggering","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Note-on\/note-off controls","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Any momentary action triggers"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"ToggleButton-Primitive","level":3,"text":"ToggleButton Primitive","type":"heading"},{"inlineContent":[{"type":"text","text":"State-based switching control:"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicToggle: View {","    @State private var isMuted: Bool = false","    ","    var body: some View {","        ToggleButton(isOn: $isMuted) { muted in","            audioChannel.setMuted(muted)","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Key Features:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Clear on\/off visual states","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Immediate state feedback","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Configurable toggle behavior"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Accessibility-optimized","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Best For:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Mute\/unmute controls"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Solo\/unsolo switches","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Effect bypass toggles"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Any binary state controls"}]}]}],"type":"unorderedList"},{"anchor":"LED-Primitive","level":3,"text":"LED Primitive","type":"heading"},{"inlineContent":[{"text":"Status indicator with real-time updates:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicLED: View {","    @State private var isActive: Bool = false","    ","    var body: some View {","        LED(","            isActive: $isActive,","            color: .green,","            intensity: 0.8","        )","        .onReceive(audioEngine.activityPublisher) { active in","            isActive = active","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Key Features:"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Configurable colors and intensity"}]}]},{"content":[{"inlineContent":[{"text":"Smooth on\/off transitions","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Real-time status updates"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Low CPU overhead"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Best For:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Signal present indicators","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clipping warnings"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Status monitoring"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Activity feedback"}]}]}],"type":"unorderedList"},{"anchor":"LevelMeter-Primitive","level":3,"text":"LevelMeter Primitive","type":"heading"},{"inlineContent":[{"text":"Real-time audio visualization:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicLevelMeter: View {","    @State private var level: Float = 0.0","    ","    var body: some View {","        LevelMeter(","            level: $level,","            orientation: .vertical,","            peakHold: true","        )","        .frame(width: 20, height: 150)","        .onReceive(audioEngine.levelPublisher) { newLevel in","            level = newLevel","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Key Features:","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Real-time level display"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Peak hold functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Configurable scale markings","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Optimized for 60fps updates"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"Best For:","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Input\/output metering","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Gain reduction visualization"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Real-time audio monitoring"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Signal level feedback"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"GyroscopePrimitive","level":3,"text":"GyroscopePrimitive","type":"heading"},{"inlineContent":[{"text":"Motion-based control using device orientation:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct BasicMotionControl: View {","    @State private var motionValue: CGPoint = .zero","    ","    var body: some View {","        GyroscopePrimitive(value: $motionValue) { motion in","            spatialProcessor.setPosition(","                x: motion.x,","                y: motion.y","            )","        }","        .frame(width: 150, height: 150)","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Key Features:"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Real-time motion tracking","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Configurable sensitivity","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Platform-optimized implementation","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Battery-efficient operation","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Best For:"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Spatial audio effects","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Performance controllers"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Gesture-based interaction"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Motion-responsive parameters"}]}]}],"type":"unorderedList"},{"anchor":"Why-Use-Primitives","level":2,"text":"Why Use Primitives?","type":"heading"},{"anchor":"Learning-Audio-Interface-Development","level":3,"text":"Learning Audio Interface Development","type":"heading"},{"inlineContent":[{"type":"text","text":"Primitives help you understand:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Core Interaction Patterns"}],"type":"strong"},{"type":"text","text":": How audio controls should behave"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Gesture Recognition","type":"text"}]},{"type":"text","text":": Touch and mouse handling for precision"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Real-time Performance"}],"type":"strong"},{"text":": Optimizations needed for audio applications","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Parameter Mapping"}]},{"text":": Converting UI gestures to audio parameters","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Building-Custom-Components","level":3,"text":"Building Custom Components","type":"heading"},{"inlineContent":[{"text":"Use primitives when:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Built-in components don’t match your exact needs"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"You want complete control over visual styling"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You’re prototyping new interaction paradigms","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You need maximum performance optimization","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Incremental-Adoption","level":3,"text":"Incremental Adoption","type":"heading"},{"inlineContent":[{"text":"Start with primitives to:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Learn AudioUI concepts without visual complexity","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Build understanding of audio parameter types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create proof-of-concept interfaces","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Gradually add visual sophistication"}]}]}],"type":"unorderedList"},{"anchor":"Performance-Characteristics","level":2,"text":"Performance Characteristics","type":"heading"},{"inlineContent":[{"text":"AudioUICore primitives are optimized for:","type":"text"}],"type":"paragraph"},{"anchor":"Real-time-Audio-Applications","level":3,"text":"Real-time Audio Applications","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"60fps interaction with minimal CPU overhead","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Direct parameter updates without intermediate layers","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Efficient gesture recognition algorithms","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory-conscious implementation"}]}]}],"type":"unorderedList"},{"anchor":"Cross-platform-Consistency","level":3,"text":"Cross-platform Consistency","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identical behavior across iOS, macOS, watchOS, and tvOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Platform-specific optimizations (touch vs mouse)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Consistent timing and responsiveness"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Unified API across all platforms"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Integration-with-Audio-Engines","level":2,"text":"Integration with Audio Engines","type":"heading"},{"anchor":"AVAudioEngine-Integration","level":3,"text":"AVAudioEngine Integration","type":"heading"},{"syntax":"swift","code":["import AVFoundation","import AudioUICore","","class AudioEngineController: ObservableObject {","    private let engine = AVAudioEngine()","    private let player = AVAudioPlayerNode()","    ","    func connectKnob() -> some View {","        Knob(value: .constant(0.5)) { value in","            \/\/ Direct AVAudioEngine parameter control","            player.volume = Float(value)","        }","    }","}"],"type":"codeListing"},{"anchor":"AudioKit-Integration","level":3,"text":"AudioKit Integration","type":"heading"},{"syntax":"swift","code":["import AudioKit","import AudioUICore","","class AudioKitController: ObservableObject {","    private let oscillator = Oscillator()","    ","    func connectFrequencyKnob() -> some View {","        Knob(value: .constant(0.5)) { normalizedValue in","            \/\/ Map to AudioKit parameter range","            oscillator.frequency = normalizedValue * 2000 \/\/ 0-2000Hz","        }","    }","}"],"type":"codeListing"},{"anchor":"Building-Your-First-Primitive-Interface","level":2,"text":"Building Your First Primitive Interface","type":"heading"},{"inlineContent":[{"type":"text","text":"Here’s a complete example using only AudioUICore primitives:"}],"type":"paragraph"},{"syntax":"swift","code":["import SwiftUI","import AudioUICore","","struct PrimitiveAudioInterface: View {","    @State private var volume: Double = 0.5","    @State private var frequency: Double = 0.5","    @State private var isPlaying: Bool = false","    @State private var level: Float = 0.0","    ","    var body: some View {","        VStack(spacing: 30) {","            Text(\"Primitive Audio Interface\")","                .font(.title)","            ","            HStack(spacing: 40) {","                \/\/ Volume control","                VStack {","                    Text(\"Volume\")","                    Fader(value: $volume) { newValue in","                        audioEngine.setVolume(newValue)","                    }","                    .frame(width: 40, height: 150)","                }","                ","                \/\/ Frequency control","                VStack {","                    Text(\"Frequency\")","                    Knob(value: $frequency) { newValue in","                        audioEngine.setFrequency(newValue * 2000)","                    }","                    .frame(width: 80, height: 80)","                }","                ","                \/\/ Level meter","                VStack {","                    Text(\"Level\")","                    LevelMeter(level: $level)","                        .frame(width: 20, height: 150)","                }","            }","            ","            \/\/ Play\/Stop control","            ToggleButton(isOn: $isPlaying) { playing in","                if playing {","                    audioEngine.start()","                } else {","                    audioEngine.stop()","                }","            }","        }","        .padding()","    }","}"],"type":"codeListing"},{"anchor":"When-to-Graduate-to-Components","level":2,"text":"When to Graduate to Components","type":"heading"},{"inlineContent":[{"type":"text","text":"Move from primitives to styled components when:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You need consistent visual design across your app"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You want to apply professional theming","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You’re building production interfaces"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"You need pre-built accessibility features","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Next-Steps","level":2,"text":"Next Steps","type":"heading"},{"inlineContent":[{"text":"After mastering AudioUICore primitives:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Explore AudioUITheme","type":"text"}]},{"type":"text","text":": Learn how theming transforms primitives into beautiful components"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Study AudioUIComponents","type":"text"}]},{"text":": See how primitives become production-ready controls","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Build Custom Components"}],"type":"strong"},{"text":": Create your own styled components using primitives as foundation","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Optimize Performance"}],"type":"strong"},{"text":": Learn advanced techniques for real-time audio interfaces","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"AudioUICore provides the solid foundation that makes everything else in AudioUI possible. Understanding these primitives will make you a better audio interface developer and help you build more efficient, responsive, and professional audio applications.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"The foundation layer providing primitive audio interface controls with precise gesture handling and real-time performance."}],"variants":[{"paths":["\/documentation\/audioui\/audiouicore"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"seeAlsoSections":[{"title":"Framework Architecture","generated":true,"anchor":"Framework-Architecture","identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUITheme","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIMetalFX"]}],"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI/AudioUIMetalFX":{"title":"AudioUIMetalFX","type":"topic","kind":"article","abstract":[{"text":"GPU-accelerated visual effects and real-time graphics processing for audio interfaces.","type":"text"}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIMetalFX","url":"\/documentation\/audioui\/audiouimetalfx","role":"collectionGroup"},"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/AudioUIComponents":{"role":"collectionGroup","type":"topic","title":"AudioUIComponents","url":"\/documentation\/audioui\/audiouicomponents","abstract":[{"type":"text","text":"Production-ready audio interface components with hardware-inspired design and real-time performance."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents"},"doc://audiouiswift.AudioUI/documentation/AudioUI/AudioUITheme":{"title":"AudioUITheme Module","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUITheme","type":"topic","abstract":[{"text":"Advanced theming system that separates visual appearance (Looks) from interaction behavior (Feels), enabling sophisticated and consistent audio interface design.","type":"text"}],"kind":"article","url":"\/documentation\/audioui\/audiouitheme","role":"article"}}}