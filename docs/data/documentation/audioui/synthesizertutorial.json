{"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"This tutorial guides you through creating a professional synthesizer interface from scratch, covering oscillators, filters, envelopes, and effects. You’ll learn how to combine AudioUI components into a cohesive instrument interface.","type":"text"}],"type":"paragraph"},{"anchor":"What-Youll-Build","level":2,"text":"What You’ll Build","type":"heading"},{"inlineContent":[{"text":"By the end of this tutorial, you’ll have created:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Multi-oscillator synthesizer with waveform selection"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Multi-mode filter with cutoff and resonance controls","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"ADSR envelope generator with visual feedback"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Built-in effects rack with delay and reverb"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Real-time parameter visualization","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Preset management system","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Prerequisites","level":2,"text":"Prerequisites","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Basic knowledge of SwiftUI","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Understanding of audio synthesis concepts"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Familiarity with AudioUI components"}]}]}],"type":"unorderedList"},{"anchor":"Step-1-Project-Setup","level":2,"text":"Step 1: Project Setup","type":"heading"},{"inlineContent":[{"text":"First, create a new SwiftUI project and add AudioUI as a dependency:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import SwiftUI","import AudioUI","import AudioUICore","import AudioUITheme","","struct SynthesizerApp: App {","    var body: some Scene {","        WindowGroup {","            SynthesizerView()","                .audioUITheme(.neumorphic)","        }","    }","}"],"type":"codeListing"},{"anchor":"Step-2-Oscillator-Section","level":2,"text":"Step 2: Oscillator Section","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the oscillator controls with waveform selection and tuning:"}]},{"type":"codeListing","syntax":"swift","code":["struct OscillatorSection: View {","    @Binding var waveform: Waveform","    @Binding var frequency: Double","    @Binding var detune: Double","    @Binding var pulseWidth: Double","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"OSCILLATOR\")","                .audioUILabel(.section)","            ","            HStack(spacing: 30) {","                \/\/ Waveform Selection","                VStack {","                    Text(\"WAVE\")","                        .audioUILabel(.parameter)","                    ","                    HStack {","                        ForEach(Waveform.allCases, id: \\.self) { wave in","                            RectangularButton(","                                title: wave.symbol,","                                isPressed: .constant(waveform == wave)","                            ) {","                                waveform = wave","                            }","                            .frame(width: 40, height: 30)","                        }","                    }","                }","                ","                \/\/ Frequency Control","                VStack {","                    Text(\"FREQ\")","                        .audioUILabel(.parameter)","                    ","                    InsetNeumorphicKnob(value: Binding(","                        get: { (frequency - 20) \/ 20000 },","                        set: { frequency = 20 + $0 * 20000 }","                    ))","                    .frame(width: 80, height: 80)","                    ","                    Text(\"\\(Int(frequency)) Hz\")","                        .audioUILabel(.value)","                }","                ","                \/\/ Detune Control","                VStack {","                    Text(\"DETUNE\")","                        .audioUILabel(.parameter)","                    ","                    InsetNeumorphicKnob(value: Binding(","                        get: { (detune + 50) \/ 100 },","                        set: { detune = $0 * 100 - 50 }","                    ))","                    .frame(width: 60, height: 60)","                    ","                    Text(\"\\(Int(detune)) ct\")","                        .audioUILabel(.value)","                }","                ","                \/\/ Pulse Width (for square wave)","                if waveform == .square {","                    VStack {","                        Text(\"WIDTH\")","                            .audioUILabel(.parameter)","                        ","                        InsetNeumorphicKnob(value: $pulseWidth)","                            .frame(width: 60, height: 60)","                        ","                        Text(\"\\(Int(pulseWidth * 100))%\")","                            .audioUILabel(.value)","                    }","                    .transition(.opacity.combined(with: .scale))","                }","            }","            .animation(.easeInOut(duration: 0.2), value: waveform)","        }","        .audioUIGroupBox()","    }","}","","enum Waveform: CaseIterable {","    case sine, triangle, sawtooth, square","    ","    var symbol: String {","        switch self {","        case .sine: return \"∿\"","        case .triangle: return \"△\"","        case .sawtooth: return \"⩙\"","        case .square: return \"⊓\"","        }","    }","}"]},{"level":2,"anchor":"Step-3-Filter-Section","type":"heading","text":"Step 3: Filter Section"},{"type":"paragraph","inlineContent":[{"text":"Implement a multi-mode filter with cutoff, resonance, and envelope amount:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct FilterSection: View {","    @Binding var cutoff: Double","    @Binding var resonance: Double","    @Binding var filterType: FilterType","    @Binding var envelopeAmount: Double","    @Binding var keyTracking: Double","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"FILTER\")","                .audioUILabel(.section)","            ","            HStack(spacing: 30) {","                \/\/ Filter Type Selection","                VStack {","                    Text(\"TYPE\")","                        .audioUILabel(.parameter)","                    ","                    VStack(spacing: 8) {","                        ForEach(FilterType.allCases, id: \\.self) { type in","                            RectangularButton(","                                title: type.abbreviation,","                                isPressed: .constant(filterType == type)","                            ) {","                                filterType = type","                            }","                            .frame(width: 50, height: 25)","                        }","                    }","                }","                ","                \/\/ Cutoff Control with XY Pad","                VStack {","                    Text(\"CUTOFF & RESONANCE\")","                        .audioUILabel(.parameter)","                    ","                    FilterXYPad(","                        x: $cutoff,","                        y: $resonance","                    )","                    .frame(width: 120, height: 120)","                    ","                    HStack {","                        Text(\"\\(Int(cutoff * 20000)) Hz\")","                        Spacer()","                        Text(\"\\(Int(resonance * 100))%\")","                    }","                    .audioUILabel(.value)","                    .frame(width: 120)","                }","                ","                \/\/ Envelope Amount","                VStack {","                    Text(\"ENV AMT\")","                        .audioUILabel(.parameter)","                    ","                    VerticalInsetSlider(value: Binding(","                        get: { (envelopeAmount + 1) \/ 2 },","                        set: { envelopeAmount = $0 * 2 - 1 }","                    ))","                    .frame(width: 30, height: 100)","                    ","                    Text(\"\\(Int(envelopeAmount * 100))\")","                        .audioUILabel(.value)","                }","                ","                \/\/ Key Tracking","                VStack {","                    Text(\"KEY TRK\")","                        .audioUILabel(.parameter)","                    ","                    InsetNeumorphicKnob(value: $keyTracking)","                        .frame(width: 60, height: 60)","                    ","                    Text(\"\\(Int(keyTracking * 100))%\")","                        .audioUILabel(.value)","                }","            }","        }","        .audioUIGroupBox()","    }","}","","enum FilterType: CaseIterable {","    case lowpass, highpass, bandpass, notch","    ","    var abbreviation: String {","        switch self {","        case .lowpass: return \"LP\"","        case .highpass: return \"HP\"","        case .bandpass: return \"BP\"","        case .notch: return \"NT\"","        }","    }","}"]},{"level":2,"anchor":"Step-4-Envelope-Generator","type":"heading","text":"Step 4: Envelope Generator"},{"type":"paragraph","inlineContent":[{"text":"Create an ADSR envelope with visual feedback:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct EnvelopeSection: View {","    @Binding var attack: Double","    @Binding var decay: Double","    @Binding var sustain: Double","    @Binding var release: Double","    @State private var isTriggered = false","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"ENVELOPE\")","                .audioUILabel(.section)","            ","            HStack(spacing: 30) {","                \/\/ Envelope Visualization","                VStack {","                    Text(\"ADSR CURVE\")","                        .audioUILabel(.parameter)","                    ","                    EnvelopeVisualization(","                        attack: attack,","                        decay: decay,","                        sustain: sustain,","                        release: release,","                        isTriggered: isTriggered","                    )","                    .frame(width: 200, height: 100)","                    .audioUIDisplay()","                    ","                    \/\/ Trigger button for testing","                    RectangularButton(","                        title: \"TRIGGER\",","                        isPressed: $isTriggered","                    ) {","                        triggerEnvelope()","                    }","                    .frame(width: 80, height: 30)","                }","                ","                \/\/ ADSR Controls","                HStack(spacing: 20) {","                    VStack {","                        Text(\"ATTACK\")","                            .audioUILabel(.parameter)","                        ","                        VerticalInsetSlider(value: $attack)","                            .frame(width: 30, height: 100)","                        ","                        Text(\"\\(Int(attack * 1000)) ms\")","                            .audioUILabel(.value)","                    }","                    ","                    VStack {","                        Text(\"DECAY\")","                            .audioUILabel(.parameter)","                        ","                        VerticalInsetSlider(value: $decay)","                            .frame(width: 30, height: 100)","                        ","                        Text(\"\\(Int(decay * 1000)) ms\")","                            .audioUILabel(.value)","                    }","                    ","                    VStack {","                        Text(\"SUSTAIN\")","                            .audioUILabel(.parameter)","                        ","                        VerticalInsetSlider(value: $sustain)","                            .frame(width: 30, height: 100)","                        ","                        Text(\"\\(Int(sustain * 100))%\")","                            .audioUILabel(.value)","                    }","                    ","                    VStack {","                        Text(\"RELEASE\")","                            .audioUILabel(.parameter)","                        ","                        VerticalInsetSlider(value: $release)","                            .frame(width: 30, height: 100)","                        ","                        Text(\"\\(Int(release * 1000)) ms\")","                            .audioUILabel(.value)","                    }","                }","            }","        }","        .audioUIGroupBox()","    }","    ","    private func triggerEnvelope() {","        withAnimation(.easeOut(duration: 0.1)) {","            isTriggered = true","        }","        ","        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {","            withAnimation(.easeOut(duration: 0.2)) {","                isTriggered = false","            }","        }","    }","}"]},{"level":2,"anchor":"Step-5-Effects-Section","type":"heading","text":"Step 5: Effects Section"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add built-in effects with real-time parameter control:"}]},{"code":["struct EffectsSection: View {","    @Binding var delayTime: Double","    @Binding var delayFeedback: Double","    @Binding var delayMix: Double","    @Binding var reverbSize: Double","    @Binding var reverbDamping: Double","    @Binding var reverbMix: Double","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"EFFECTS\")","                .audioUILabel(.section)","            ","            HStack(spacing: 40) {","                \/\/ Delay Section","                VStack(spacing: 15) {","                    Text(\"DELAY\")","                        .audioUILabel(.subsection)","                    ","                    HStack(spacing: 20) {","                        VStack {","                            Text(\"TIME\")","                                .audioUILabel(.parameter)","                            ","                            InsetNeumorphicKnob(value: $delayTime)","                                .frame(width: 60, height: 60)","                            ","                            Text(\"\\(Int(delayTime * 1000)) ms\")","                                .audioUILabel(.value)","                        }","                        ","                        VStack {","                            Text(\"FEEDBACK\")","                                .audioUILabel(.parameter)","                            ","                            InsetNeumorphicKnob(value: $delayFeedback)","                                .frame(width: 60, height: 60)","                            ","                            Text(\"\\(Int(delayFeedback * 100))%\")","                                .audioUILabel(.value)","                        }","                        ","                        VStack {","                            Text(\"MIX\")","                                .audioUILabel(.parameter)","                            ","                            InsetNeumorphicKnob(value: $delayMix)","                                .frame(width: 60, height: 60)","                            ","                            Text(\"\\(Int(delayMix * 100))%\")","                                .audioUILabel(.value)","                        }","                    }","                }","                ","                \/\/ Reverb Section","                VStack(spacing: 15) {","                    Text(\"REVERB\")","                        .audioUILabel(.subsection)","                    ","                    HStack(spacing: 20) {","                        VStack {","                            Text(\"SIZE\")","                                .audioUILabel(.parameter)","                            ","                            InsetNeumorphicKnob(value: $reverbSize)","                                .frame(width: 60, height: 60)","                            ","                            Text(\"\\(Int(reverbSize * 100))%\")","                                .audioUILabel(.value)","                        }","                        ","                        VStack {","                            Text(\"DAMPING\")","                                .audioUILabel(.parameter)","                            ","                            InsetNeumorphicKnob(value: $reverbDamping)","                                .frame(width: 60, height: 60)","                            ","                            Text(\"\\(Int(reverbDamping * 100))%\")","                                .audioUILabel(.value)","                        }","                        ","                        VStack {","                            Text(\"MIX\")","                                .audioUILabel(.parameter)","                            ","                            InsetNeumorphicKnob(value: $reverbMix)","                                .frame(width: 60, height: 60)","                            ","                            Text(\"\\(Int(reverbMix * 100))%\")","                                .audioUILabel(.value)","                        }","                    }","                }","            }","        }","        .audioUIGroupBox()","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Step 6: Master Section","type":"heading","anchor":"Step-6-Master-Section","level":2},{"type":"paragraph","inlineContent":[{"text":"Create the master output controls with level metering:","type":"text"}]},{"code":["struct MasterSection: View {","    @Binding var volume: Double","    @Binding var pan: Double","    @State private var leftLevel: Double = 0.0","    @State private var rightLevel: Double = 0.0","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"MASTER\")","                .audioUILabel(.section)","            ","            HStack(spacing: 30) {","                \/\/ Level Meters","                VStack {","                    Text(\"LEVELS\")","                        .audioUILabel(.parameter)","                    ","                    HStack(spacing: 10) {","                        VStack {","                            Text(\"L\")","                                .audioUILabel(.small)","                            ","                            LevelMeter(level: leftLevel)","                                .frame(width: 20, height: 120)","                        }","                        ","                        VStack {","                            Text(\"R\")","                                .audioUILabel(.small)","                            ","                            LevelMeter(level: rightLevel)","                                .frame(width: 20, height: 120)","                        }","                    }","                }","                ","                \/\/ Volume Control","                VStack {","                    Text(\"VOLUME\")","                        .audioUILabel(.parameter)","                    ","                    VerticalInsetSlider(value: $volume)","                        .frame(width: 40, height: 120)","                    ","                    Text(\"\\(Int(volume * 100))\")","                        .audioUILabel(.value)","                }","                ","                \/\/ Pan Control","                VStack {","                    Text(\"PAN\")","                        .audioUILabel(.parameter)","                    ","                    HorizontalFader(value: Binding(","                        get: { (pan + 1) \/ 2 },","                        set: { pan = $0 * 2 - 1 }","                    ))","                    .frame(width: 100, height: 30)","                    ","                    Text(panLabel)","                        .audioUILabel(.value)","                }","            }","        }","        .audioUIGroupBox()","        .onReceive(Timer.publish(every: 0.05, on: .main, in: .common).autoconnect()) { _ in","            updateLevels()","        }","    }","    ","    private var panLabel: String {","        if abs(pan) < 0.05 {","            return \"CENTER\"","        } else if pan > 0 {","            return \"R\\(Int(pan * 100))\"","        } else {","            return \"L\\(Int(-pan * 100))\"","        }","    }","    ","    private func updateLevels() {","        \/\/ Simulate audio level updates","        leftLevel = Double.random(in: 0...volume)","        rightLevel = Double.random(in: 0...volume)","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Step 7: Complete Synthesizer View","type":"heading","anchor":"Step-7-Complete-Synthesizer-View","level":2},{"type":"paragraph","inlineContent":[{"text":"Combine all sections into the main synthesizer interface:","type":"text"}]},{"code":["struct SynthesizerView: View {","    \/\/ Oscillator parameters","    @State private var waveform: Waveform = .sawtooth","    @State private var frequency: Double = 440.0","    @State private var detune: Double = 0.0","    @State private var pulseWidth: Double = 0.5","    ","    \/\/ Filter parameters","    @State private var cutoff: Double = 0.8","    @State private var resonance: Double = 0.2","    @State private var filterType: FilterType = .lowpass","    @State private var envelopeAmount: Double = 0.5","    @State private var keyTracking: Double = 0.5","    ","    \/\/ Envelope parameters","    @State private var attack: Double = 0.1","    @State private var decay: Double = 0.3","    @State private var sustain: Double = 0.7","    @State private var release: Double = 0.4","    ","    \/\/ Effects parameters","    @State private var delayTime: Double = 0.25","    @State private var delayFeedback: Double = 0.3","    @State private var delayMix: Double = 0.2","    @State private var reverbSize: Double = 0.6","    @State private var reverbDamping: Double = 0.4","    @State private var reverbMix: Double = 0.15","    ","    \/\/ Master parameters","    @State private var volume: Double = 0.8","    @State private var pan: Double = 0.0","    ","    var body: some View {","        ScrollView {","            VStack(spacing: 30) {","                \/\/ Header","                Text(\"AudioUI Synthesizer\")","                    .font(.largeTitle)","                    .fontWeight(.bold)","                    .audioUIAccent()","                ","                \/\/ Oscillator Section","                OscillatorSection(","                    waveform: $waveform,","                    frequency: $frequency,","                    detune: $detune,","                    pulseWidth: $pulseWidth","                )","                ","                \/\/ Filter Section","                FilterSection(","                    cutoff: $cutoff,","                    resonance: $resonance,","                    filterType: $filterType,","                    envelopeAmount: $envelopeAmount,","                    keyTracking: $keyTracking","                )","                ","                \/\/ Envelope Section","                EnvelopeSection(","                    attack: $attack,","                    decay: $decay,","                    sustain: $sustain,","                    release: $release","                )","                ","                \/\/ Effects Section","                EffectsSection(","                    delayTime: $delayTime,","                    delayFeedback: $delayFeedback,","                    delayMix: $delayMix,","                    reverbSize: $reverbSize,","                    reverbDamping: $reverbDamping,","                    reverbMix: $reverbMix","                )","                ","                \/\/ Master Section","                MasterSection(","                    volume: $volume,","                    pan: $pan","                )","                ","                \/\/ Preset Management","                PresetSection()","            }","            .padding(20)","        }","        .audioUIBackground()","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Step 8: Adding Presets","type":"heading","anchor":"Step-8-Adding-Presets","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implement preset management for saving and loading synthesizer settings:"}]},{"code":["struct PresetSection: View {","    @State private var presets: [SynthPreset] = SynthPreset.builtInPresets","    @State private var selectedPreset: SynthPreset?","    @State private var showingSaveDialog = false","    ","    var body: some View {","        VStack(spacing: 15) {","            Text(\"PRESETS\")","                .audioUILabel(.section)","            ","            HStack(spacing: 15) {","                \/\/ Preset List","                ScrollView(.horizontal, showsIndicators: false) {","                    HStack(spacing: 10) {","                        ForEach(presets) { preset in","                            RectangularButton(","                                title: preset.name,","                                isPressed: .constant(selectedPreset?.id == preset.id)","                            ) {","                                loadPreset(preset)","                            }","                            .frame(width: 100, height: 40)","                        }","                    }","                    .padding(.horizontal)","                }","                ","                \/\/ Save Button","                RectangularButton(","                    title: \"SAVE\",","                    isPressed: .constant(false)","                ) {","                    showingSaveDialog = true","                }","                .frame(width: 60, height: 40)","            }","        }","        .audioUIGroupBox()","        .sheet(isPresented: $showingSaveDialog) {","            SavePresetView { name in","                saveCurrentPreset(name: name)","            }","        }","    }","    ","    private func loadPreset(_ preset: SynthPreset) {","        selectedPreset = preset","        \/\/ Apply preset parameters to synthesizer","        \/\/ This would typically update all the @State variables","    }","    ","    private func saveCurrentPreset(name: String) {","        let newPreset = SynthPreset(","            name: name,","            \/\/ Capture current parameter values","            waveform: .sawtooth, \/\/ Current waveform","            cutoff: 0.8,         \/\/ Current cutoff","            \/\/ ... other parameters","        )","        presets.append(newPreset)","    }","}","","struct SynthPreset: Identifiable, Codable {","    let id = UUID()","    let name: String","    let waveform: Waveform","    let cutoff: Double","    \/\/ ... other parameters","    ","    static let builtInPresets = [","        SynthPreset(name: \"Lead\", waveform: .sawtooth, cutoff: 0.8),","        SynthPreset(name: \"Bass\", waveform: .square, cutoff: 0.4),","        SynthPreset(name: \"Pad\", waveform: .triangle, cutoff: 0.6),","        SynthPreset(name: \"Pluck\", waveform: .sine, cutoff: 0.9)","    ]","}"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"anchor":"Conclusion","text":"Conclusion"},{"type":"paragraph","inlineContent":[{"text":"You’ve now built a complete synthesizer interface using AudioUI! This tutorial demonstrated:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Component Integration"}]},{"text":": Combining different AudioUI components","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Real-time Controls","type":"text"}]},{"type":"text","text":": Responsive parameter manipulation"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Visual Feedback"}]},{"type":"text","text":": Live displays and meters"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Preset Management"}],"type":"strong"},{"text":": Saving and loading configurations","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Professional Layout"}],"type":"strong"},{"text":": Organized, intuitive interface design","type":"text"}]}]}]},{"level":2,"type":"heading","anchor":"Next-Steps","text":"Next Steps"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Connect to an audio engine (AVAudioEngine, AudioKit, etc.)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Add MIDI input support"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Implement polyphony","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Add more oscillator types","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Create custom visual effects"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Build a keyboard interface"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The synthesizer you’ve built provides a solid foundation for creating professional audio software with AudioUI!"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"Build a complete software synthesizer interface using AudioUI components."}],"identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/SynthesizerTutorial","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/audioui\/synthesizertutorial"]}],"seeAlsoSections":[{"generated":true,"anchor":"Complete-Tutorials","title":"Complete Tutorials","identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumMachineTutorial","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MixerTutorial","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControlTutorial"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","metadata":{"title":"Synthesizer Tutorial","roleHeading":"Article","role":"article","modules":[{"name":"AudioUI"}]},"sections":[],"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/MotionControlTutorial":{"role":"article","type":"topic","abstract":[{"text":"Build motion-responsive audio interfaces using device sensors and gesture controls.","type":"text"}],"title":"Motion Control Tutorial","url":"\/documentation\/audioui\/motioncontroltutorial","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControlTutorial","kind":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DrumMachineTutorial":{"type":"topic","abstract":[{"text":"Build a complete, professional drum machine with velocity-sensitive pads and advanced pattern sequencing.","type":"text"}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumMachineTutorial","role":"article","title":"Drum Machine Tutorial","url":"\/documentation\/audioui\/drummachinetutorial","kind":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/MixerTutorial":{"type":"topic","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MixerTutorial","url":"\/documentation\/audioui\/mixertutorial","abstract":[{"type":"text","text":"Build a professional audio mixer interface with channel strips, EQ, effects, and automation."}],"title":"Mixer Tutorial","kind":"article","role":"article"}}}