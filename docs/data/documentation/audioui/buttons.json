{"seeAlsoSections":[{"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPhilosophies","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Knobs"],"anchor":"Related-Documentation","title":"Related Documentation"},{"generated":true,"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Knobs","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Sliders","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumPads","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/XYPads","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControls","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Displays","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/GroupComponents"],"anchor":"Component-Library","title":"Component Library"}],"sections":[],"abstract":[{"type":"text","text":"Tactile button components for audio interface controls with professional behavior and styling."}],"metadata":{"modules":[{"name":"AudioUI"}],"role":"article","roleHeading":"Article","title":"Buttons"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/audioui\/buttons"]}],"identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Buttons","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"],["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents"]]},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"AudioUI buttons provide the foundation for triggering actions, toggling states, and momentary controls in audio applications. Each button type offers authentic hardware-inspired behavior with proper tactile feedback, visual states, and accessibility support.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Available in both Minimal and Neumorphic design philosophies, buttons integrate seamlessly with the AudioUI theming system.","type":"text"}],"type":"paragraph"},{"anchor":"Button-Types","level":2,"text":"Button Types","type":"heading"},{"anchor":"CircularButton","level":3,"text":"CircularButton","type":"heading"},{"inlineContent":[{"text":"Round buttons perfect for transport controls, bypass switches, and effect triggers.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import SwiftUI","import AudioUI","","struct TransportControls: View {","    @State private var isPlaying = false","    @State private var isRecording = false","    ","    var body: some View {","        HStack(spacing: 20) {","            CircularButton {","                \/\/ Play\/Pause action","                isPlaying.toggle()","                audioEngine.togglePlayback()","            } label: {","                Image(systemName: isPlaying ? \"pause.fill\" : \"play.fill\")","                    .font(.title2)","                    .foregroundColor(.white)","            }","            .theme(.audioUINeumorphic)","            ","            CircularButton {","                \/\/ Record action","                isRecording.toggle()","                audioEngine.toggleRecording()","            } label: {","                Circle()","                    .fill(isRecording ? Color.red : Color.gray)","                    .frame(width: 20, height: 20)","            }","            .theme(.audioUINeumorphic)","        }","    }","}"],"type":"codeListing"},{"anchor":"RectangularButton","level":3,"text":"RectangularButton","type":"heading"},{"inlineContent":[{"text":"Rectangular buttons ideal for labeled controls, channel strips, and function keys.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct MixerChannelButtons: View {","    @State private var isMuted = false","    @State private var isSoloed = false","    @State private var isRecordEnabled = false","    ","    var body: some View {","        VStack(spacing: 8) {","            RectangularButton {","                isMuted.toggle()","            } label: {","                Text(\"MUTE\")","                    .font(.caption)","                    .fontWeight(.bold)","                    .foregroundColor(isMuted ? .red : .primary)","            }","            .frame(width: 50, height: 25)","            ","            RectangularButton {","                isSoloed.toggle()","            } label: {","                Text(\"SOLO\")","                    .font(.caption)","                    .fontWeight(.bold)","                    .foregroundColor(isSoloed ? .yellow : .primary)","            }","            .frame(width: 50, height: 25)","            ","            RectangularButton {","                isRecordEnabled.toggle()","            } label: {","                Text(\"REC\")","                    .font(.caption)","                    .fontWeight(.bold)","                    .foregroundColor(isRecordEnabled ? .red : .primary)","            }","            .frame(width: 50, height: 25)","        }","        .theme(.audioUIMinimal)","    }","}"],"type":"codeListing"},{"anchor":"ToggleButton","level":3,"text":"ToggleButton","type":"heading"},{"inlineContent":[{"type":"text","text":"Specialized buttons for binary state controls with clear visual feedback."}],"type":"paragraph"},{"syntax":"swift","code":["struct EffectBypassControls: View {","    @State private var reverbEnabled = true","    @State private var delayEnabled = false","    @State private var compressorEnabled = true","    ","    var body: some View {","        HStack(spacing: 15) {","            ToggleButton(isOn: $reverbEnabled) {","                VStack(spacing: 4) {","                    Image(\"reverb-icon\")","                        .foregroundColor(reverbEnabled ? .blue : .gray)","                    Text(\"REVERB\")","                        .font(.caption)","                        .foregroundColor(reverbEnabled ? .primary : .secondary)","                }","            }","            ","            ToggleButton(isOn: $delayEnabled) {","                VStack(spacing: 4) {","                    Image(\"delay-icon\")","                        .foregroundColor(delayEnabled ? .green : .gray)","                    Text(\"DELAY\")","                        .font(.caption)","                        .foregroundColor(delayEnabled ? .primary : .secondary)","                }","            }","            ","            ToggleButton(isOn: $compressorEnabled) {","                VStack(spacing: 4) {","                    Image(\"compressor-icon\")","                        .foregroundColor(compressorEnabled ? .orange : .gray)","                    Text(\"COMP\")","                        .font(.caption)","                        .foregroundColor(compressorEnabled ? .primary : .secondary)","                }","            }","        }","        .theme(.audioUINeumorphic)","    }","}"],"type":"codeListing"},{"anchor":"Button-Behavior","level":2,"text":"Button Behavior","type":"heading"},{"anchor":"Press-States","level":3,"text":"Press States","type":"heading"},{"inlineContent":[{"type":"text","text":"All buttons provide visual feedback for different interaction states:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Default"}],"type":"strong"},{"text":": Normal resting state","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Pressed","type":"text"}],"type":"strong"},{"type":"text","text":": Visual indication of active press"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Disabled","type":"text"}]},{"type":"text","text":": Clearly communicates unavailable state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Loading","type":"text"}]},{"text":": Shows processing or async operations","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"Haptic-Feedback","level":3,"text":"Haptic Feedback","type":"heading"},{"inlineContent":[{"type":"text","text":"Buttons provide appropriate haptic feedback based on context:"}],"type":"paragraph"},{"syntax":"swift","code":["CircularButton {","    \/\/ Action with haptic feedback","    HapticManager.shared.impact(.medium)","    performAction()","} label: {","    Text(\"TRIGGER\")","}",".hapticFeedback(.impact(.medium))"],"type":"codeListing"},{"anchor":"Accessibility","level":3,"text":"Accessibility","type":"heading"},{"inlineContent":[{"text":"All buttons include comprehensive accessibility support:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["RectangularButton {","    toggleMute()","} label: {","    Text(\"MUTE\")","}",".accessibilityLabel(\"Mute channel\")",".accessibilityHint(\"Double tap to mute or unmute this channel\")",".accessibilityAddTraits(isMuted ? [.button, .selected] : [.button])"],"type":"codeListing"},{"anchor":"Design-Philosophy-Integration","level":2,"text":"Design Philosophy Integration","type":"heading"},{"anchor":"Minimal-Philosophy","level":3,"text":"Minimal Philosophy","type":"heading"},{"inlineContent":[{"type":"text","text":"Clean, geometric buttons with high contrast and precise visual hierarchy:"}],"type":"paragraph"},{"syntax":"swift","code":["struct MinimalButtonExample: View {","    var body: some View {","        VStack(spacing: 16) {","            CircularButton {","                \/\/ Action","            } label: {","                Image(systemName: \"play.fill\")","                    .font(.title2)","            }","            .buttonStyle(.minimal)","            ","            RectangularButton {","                \/\/ Action  ","            } label: {","                Text(\"BYPASS\")","                    .font(.caption)","                    .fontWeight(.medium)","            }","            .buttonStyle(.minimal)","        }","        .theme(.audioUIMinimal)","    }","}"],"type":"codeListing"},{"anchor":"Neumorphic-Philosophy","level":3,"text":"Neumorphic Philosophy","type":"heading"},{"inlineContent":[{"type":"text","text":"Soft, tactile buttons with realistic depth and shadow:"}],"type":"paragraph"},{"syntax":"swift","code":["struct NeumorphicButtonExample: View {","    var body: some View {","        VStack(spacing: 16) {","            CircularButton {","                \/\/ Action","            } label: {","                Image(systemName: \"power\")","                    .font(.title2)","            }","            .buttonStyle(.neumorphic)","            ","            RectangularButton {","                \/\/ Action","            } label: {","                Text(\"POWER\")","                    .font(.caption)","                    .fontWeight(.medium)","            }","            .buttonStyle(.neumorphic)","        }","        .theme(.audioUINeumorphic)","    }","}"],"type":"codeListing"},{"anchor":"Advanced-Button-Patterns","level":2,"text":"Advanced Button Patterns","type":"heading"},{"anchor":"Multi-State-Buttons","level":3,"text":"Multi-State Buttons","type":"heading"},{"inlineContent":[{"text":"Buttons that cycle through multiple states:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct MultiStateButton: View {","    @State private var currentState: PlaybackState = .stopped","    ","    enum PlaybackState: CaseIterable {","        case stopped, playing, paused","        ","        var icon: String {","            switch self {","            case .stopped: return \"stop.fill\"","            case .playing: return \"pause.fill\"","            case .paused: return \"play.fill\"","            }","        }","        ","        var color: Color {","            switch self {","            case .stopped: return .gray","            case .playing: return .green","            case .paused: return .yellow","            }","        }","    }","    ","    var body: some View {","        CircularButton {","            currentState = PlaybackState.allCases[","                (PlaybackState.allCases.firstIndex(of: currentState)! + 1) % PlaybackState.allCases.count","            ]","        } label: {","            Image(systemName: currentState.icon)","                .font(.title2)","                .foregroundColor(currentState.color)","        }","        .frame(width: 60, height: 60)","    }","}"],"type":"codeListing"},{"anchor":"Momentary-vs-Latching","level":3,"text":"Momentary vs Latching","type":"heading"},{"inlineContent":[{"type":"text","text":"Different button behaviors for different use cases:"}],"type":"paragraph"},{"syntax":"swift","code":["struct ButtonBehaviorExample: View {","    @State private var isMomentaryPressed = false","    @State private var isLatched = false","    ","    var body: some View {","        HStack(spacing: 20) {","            \/\/ Momentary button (active only while pressed)","            CircularButton {","                \/\/ No action - handled by press gestures","            } label: {","                Text(\"HOLD\")","                    .font(.caption)","                    .foregroundColor(isMomentaryPressed ? .red : .primary)","            }","            .onPressGesture(","                onPress: { isMomentaryPressed = true },","                onRelease: { isMomentaryPressed = false }","            )","            ","            \/\/ Latching button (toggles state)","            ToggleButton(isOn: $isLatched) {","                Text(\"LATCH\")","                    .font(.caption)","                    .foregroundColor(isLatched ? .green : .primary)","            }","        }","    }","}"],"type":"codeListing"},{"anchor":"Button-Groups","level":3,"text":"Button Groups","type":"heading"},{"inlineContent":[{"text":"Organized collections of related buttons:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct TransportButtonGroup: View {","    @State private var currentTransportState: TransportState = .stopped","    ","    var body: some View {","        HStack(spacing: 12) {","            Group {","                transportButton(.rewind, \"backward.end.fill\")","                transportButton(.play, \"play.fill\")","                transportButton(.stop, \"stop.fill\")","                transportButton(.record, \"record.circle.fill\")","                transportButton(.fastForward, \"forward.end.fill\")","            }","            .frame(width: 44, height: 44)","        }","        .padding(.horizontal, 16)","        .padding(.vertical, 12)","        .background(Color(.systemGray6))","        .cornerRadius(12)","    }","    ","    private func transportButton(_ action: TransportAction, _ icon: String) -> some View {","        CircularButton {","            handleTransportAction(action)","        } label: {","            Image(systemName: icon)","                .font(.title3)","                .foregroundColor(action == .record ? .red : .primary)","        }","    }","    ","    private func handleTransportAction(_ action: TransportAction) {","        \/\/ Handle transport logic","    }","}"],"type":"codeListing"},{"anchor":"Performance-Considerations","level":2,"text":"Performance Considerations","type":"heading"},{"anchor":"Efficient-State-Management","level":3,"text":"Efficient State Management","type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Good: Use @State for local button state","@State private var isPressed = false","","\/\/ ✅ Good: Use @Binding for external state","@Binding var isEnabled: Bool","","\/\/ ❌ Avoid: Creating new objects in body","\/\/ Don't create Button() directly in body repeatedly"],"type":"codeListing"},{"anchor":"Animation-Performance","level":3,"text":"Animation Performance","type":"heading"},{"syntax":"swift","code":["\/\/ ✅ Optimized button animations","CircularButton {","    action()","} label: {","    label","}",".scaleEffect(isPressed ? 0.95 : 1.0)",".animation(.easeInOut(duration: 0.1), value: isPressed)"],"type":"codeListing"},{"anchor":"Integration-Examples","level":2,"text":"Integration Examples","type":"heading"},{"anchor":"Professional-DAW-Transport","level":3,"text":"Professional DAW Transport","type":"heading"},{"syntax":"swift","code":["struct DAWTransport: View {","    @ObservedObject var transport: TransportController","    ","    var body: some View {","        HStack(spacing: 8) {","            CircularButton {","                transport.rewind()","            } label: {","                Image(systemName: \"backward.end.fill\")","            }","            ","            CircularButton {","                transport.togglePlayPause()","            } label: {","                Image(systemName: transport.isPlaying ? \"pause.fill\" : \"play.fill\")","                    .foregroundColor(transport.isPlaying ? .green : .primary)","            }","            ","            CircularButton {","                transport.stop()","            } label: {","                Image(systemName: \"stop.fill\")","            }","            ","            CircularButton {","                transport.toggleRecord()","            } label: {","                Image(systemName: \"record.circle.fill\")","                    .foregroundColor(transport.isRecording ? .red : .primary)","            }","            ","            CircularButton {","                transport.fastForward()","            } label: {","                Image(systemName: \"forward.end.fill\")","            }","        }","        .theme(.audioUIMinimal)","    }","}"],"type":"codeListing"},{"anchor":"Effect-Pedal-Interface","level":3,"text":"Effect Pedal Interface","type":"heading"},{"syntax":"swift","code":["struct EffectPedalInterface: View {","    @State private var isEffectEnabled = false","    @State private var presetIndex = 0","    let presets = [\"Clean\", \"Crunch\", \"Lead\", \"Vintage\"]","    ","    var body: some View {","        VStack(spacing: 20) {","            \/\/ Main bypass button","            CircularButton {","                isEffectEnabled.toggle()","                HapticManager.shared.impact(.heavy)","            } label: {","                Text(\"BYPASS\")","                    .font(.caption)","                    .fontWeight(.bold)","                    .foregroundColor(isEffectEnabled ? .green : .red)","            }","            .frame(width: 80, height: 80)","            ","            \/\/ Preset selector","            HStack(spacing: 8) {","                ForEach(presets.indices, id: \\.self) { index in","                    RectangularButton {","                        presetIndex = index","                        loadPreset(index)","                    } label: {","                        Text(presets[index])","                            .font(.caption2)","                            .foregroundColor(index == presetIndex ? .blue : .primary)","                    }","                    .frame(width: 45, height: 20)","                }","            }","        }","        .padding(20)","        .background(Color(.systemGray5))","        .cornerRadius(16)","        .theme(.audioUINeumorphic)","    }","    ","    private func loadPreset(_ index: Int) {","        \/\/ Load preset logic","    }","}"],"type":"codeListing"}],"kind":"content"}],"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI/GroupComponents":{"role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"Container and layout components for organizing audio interface elements into logical groups and hierarchical structures."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/GroupComponents","url":"\/documentation\/audioui\/groupcomponents","title":"Group Components"},"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/XYPads":{"role":"article","type":"topic","abstract":[{"text":"Two-dimensional control surfaces for spatial parameter manipulation and expressive audio control.","type":"text"}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/XYPads","url":"\/documentation\/audioui\/xypads","title":"XYPads"},"doc://audiouiswift.AudioUI/documentation/AudioUI/ThemingGuide":{"title":"Theming Guide","role":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","kind":"article","abstract":[{"text":"Master AudioUI’s powerful theming system to create stunning, branded audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/themingguide","type":"topic"},"doc://audiouiswift.AudioUI/documentation/AudioUI/Sliders":{"role":"article","type":"topic","kind":"article","abstract":[{"type":"text","text":"Linear control components for precise parameter adjustment with professional fader behavior."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Sliders","url":"\/documentation\/audioui\/sliders","title":"Sliders"},"doc://audiouiswift.AudioUI/documentation/AudioUI/MotionControls":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Gesture-based and motion-sensitive controls for expressive audio interfaces."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControls","url":"\/documentation\/audioui\/motioncontrols","title":"MotionControls"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DrumPads":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Velocity-sensitive percussion controls for drum machines, samplers, and rhythmic interfaces."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumPads","url":"\/documentation\/audioui\/drumpads","title":"DrumPads"},"doc://audiouiswift.AudioUI/documentation/AudioUI/Displays":{"abstract":[{"text":"Visual feedback components for displaying audio levels, status information, and real-time data in professional audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/displays","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Displays","title":"Display Components","role":"collectionGroup","type":"topic","kind":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/AudioUIComponents":{"role":"collectionGroup","type":"topic","title":"AudioUIComponents","url":"\/documentation\/audioui\/audiouicomponents","abstract":[{"type":"text","text":"Production-ready audio interface components with hardware-inspired design and real-time performance."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DesignPhilosophies":{"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPhilosophies","role":"article","type":"topic","title":"Design Philosophies in AudioUI","abstract":[{"text":"Understanding AudioUI’s two distinct design philosophies will help you choose the right visual approach for your audio applications.","type":"text"}],"url":"\/documentation\/audioui\/designphilosophies"},"doc://audiouiswift.AudioUI/documentation/AudioUI/Knobs":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Professional rotary controls with authentic hardware behavior and stunning visual design."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Knobs","url":"\/documentation\/audioui\/knobs","title":"Knobs"}}}