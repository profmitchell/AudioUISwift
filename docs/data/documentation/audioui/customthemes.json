{"abstract":[{"text":"Create and implement custom visual themes that define the complete appearance and behavior of AudioUI components across your application.","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"AudioUIâ€™s custom theme system allows you to create cohesive design languages that span your entire audio application. Custom themes combine colors, typography, spacing, animations, and interaction patterns into unified design systems that can transform the look and feel of all AudioUI components.","type":"text"}]},{"anchor":"Theme-Architecture","type":"heading","text":"Theme Architecture","level":2},{"anchor":"Complete-Theme-Definition","type":"heading","text":"Complete Theme Definition","level":3},{"type":"paragraph","inlineContent":[{"text":"A custom theme encompasses all visual and interactive aspects of your interface:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import AudioUI","","struct StudioProTheme: AudioUITheme {","    \/\/ Theme identification","    let name = \"Studio Pro\"","    let version = \"1.0\"","    let author = \"Your Studio\"","    ","    \/\/ Core visual system","    let colorScheme = StudioProColorScheme()","    let typography = StudioProTypography()","    let spacing = StudioProSpacing()","    let animations = StudioProAnimations()","    let shapes = StudioProShapes()","    ","    \/\/ Component-specific styling","    let componentStyles = StudioProComponentStyles()","    ","    \/\/ Interaction patterns","    let haptics = StudioProHaptics()","    let sounds = StudioProSounds()","}"]},{"anchor":"Color-System-Definition","type":"heading","text":"Color System Definition","level":3},{"type":"paragraph","inlineContent":[{"text":"Define a comprehensive color palette that covers all component states:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct StudioProColorScheme: AudioUIColorScheme {","    \/\/ Primary colors","    let background = Color(red: 0.12, green: 0.12, blue: 0.14)","    let surface = Color(red: 0.16, green: 0.16, blue: 0.18)","    let primary = Color(red: 0.2, green: 0.4, blue: 0.8)","    let secondary = Color(red: 0.8, green: 0.4, blue: 0.2)","    ","    \/\/ Text colors","    let textPrimary = Color.white","    let textSecondary = Color.white.opacity(0.7)","    let textDisabled = Color.white.opacity(0.4)","    ","    \/\/ Component states","    let componentDefault = Color(red: 0.2, green: 0.2, blue: 0.22)","    let componentHover = Color(red: 0.24, green: 0.24, blue: 0.26)","    let componentActive = Color(red: 0.18, green: 0.18, blue: 0.20)","    let componentDisabled = Color(red: 0.14, green: 0.14, blue: 0.16)","    ","    \/\/ Accent colors for different component types","    let knobTrack = Color(red: 0.3, green: 0.3, blue: 0.32)","    let knobThumb = primary","    let sliderTrack = Color(red: 0.25, green: 0.25, blue: 0.27)","    let sliderFill = primary","    ","    \/\/ Status colors","    let success = Color.green","    let warning = Color.orange","    let error = Color.red","    let info = Color.blue","    ","    \/\/ Meter colors","    let meterGreen = Color(red: 0.2, green: 0.8, blue: 0.2)","    let meterYellow = Color(red: 0.9, green: 0.8, blue: 0.1)","    let meterRed = Color(red: 0.9, green: 0.2, blue: 0.2)","    ","    \/\/ Shadows and highlights","    let shadowDark = Color.black.opacity(0.6)","    let shadowLight = Color.white.opacity(0.1)","    let highlight = Color.white.opacity(0.2)","}"]},{"anchor":"Typography-System","type":"heading","text":"Typography System","level":3},{"type":"paragraph","inlineContent":[{"text":"Define text styles that work across all interface scales:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct StudioProTypography: AudioUITypography {","    let fontFamily = \"SF Pro\"","    ","    \/\/ Component labels","    let knobLabel = TextStyle(","        font: .custom(\"SF Pro\", size: 10),","        weight: .medium,","        color: .textSecondary,","        lineHeight: 12,","        letterSpacing: 0.5","    )","    ","    let buttonLabel = TextStyle(","        font: .custom(\"SF Pro\", size: 12),","        weight: .semibold,","        color: .textPrimary,","        lineHeight: 14,","        letterSpacing: 0.3","    )","    ","    let groupTitle = TextStyle(","        font: .custom(\"SF Pro\", size: 14),","        weight: .bold,","        color: .textPrimary,","        lineHeight: 18,","        letterSpacing: 0.2","    )","    ","    \/\/ Meter labels","    let meterLabel = TextStyle(","        font: .custom(\"SF Pro Mono\", size: 8),","        weight: .regular,","        color: .textSecondary,","        lineHeight: 10,","        letterSpacing: 0.1","    )","    ","    \/\/ Status text","    let statusText = TextStyle(","        font: .custom(\"SF Pro\", size: 11),","        weight: .medium,","        color: .textSecondary,","        lineHeight: 13,","        letterSpacing: 0.2","    )","}"]},{"anchor":"Spacing-and-Layout","type":"heading","text":"Spacing and Layout","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define consistent spacing rules for all components:"}]},{"type":"codeListing","syntax":"swift","code":["struct StudioProSpacing: AudioUISpacing {","    \/\/ Base spacing unit","    let unit: CGFloat = 4","    ","    \/\/ Component spacing","    let componentPadding = CGFloat(12)","    let componentSpacing = CGFloat(16)","    let groupSpacing = CGFloat(24)","    let sectionSpacing = CGFloat(32)","    ","    \/\/ Control dimensions","    let knobSize = CGSize(width: 48, height: 48)","    let buttonSize = CGSize(width: 44, height: 32)","    let sliderThickness = CGFloat(24)","    ","    \/\/ Touch targets","    let minimumTouchTarget = CGFloat(44)","    let comfortableTouchTarget = CGFloat(52)","    ","    \/\/ Layout margins","    let screenMargin = CGFloat(20)","    let panelMargin = CGFloat(16)","    let cardMargin = CGFloat(12)","}"]},{"anchor":"Animation-System","type":"heading","text":"Animation System","level":3},{"type":"paragraph","inlineContent":[{"text":"Define consistent motion design across all interactions:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct StudioProAnimations: AudioUIAnimations {","    \/\/ Timing functions","    let easeOut = Animation.timingCurve(0.25, 0.1, 0.25, 1.0)","    let easeInOut = Animation.timingCurve(0.42, 0, 0.58, 1.0)","    let bounce = Animation.spring(","        response: 0.6,","        dampingFraction: 0.7,","        blendDuration: 0.1","    )","    ","    \/\/ Component-specific animations","    let knobRotation = Animation.timingCurve(0.4, 0.0, 0.2, 1.0, duration: 0.2)","    let buttonPress = Animation.timingCurve(0.25, 0.46, 0.45, 0.94, duration: 0.15)","    let sliderMove = Animation.timingCurve(0.4, 0.0, 0.2, 1.0, duration: 0.25)","    ","    \/\/ State transitions","    let hoverTransition = Animation.easeOut(duration: 0.1)","    let focusTransition = Animation.easeInOut(duration: 0.2)","    let disabledTransition = Animation.easeOut(duration: 0.3)","    ","    \/\/ Layout animations","    let layoutChange = Animation.spring(","        response: 0.5,","        dampingFraction: 0.8","    )","    ","    \/\/ Value changes","    let valueChange = Animation.easeOut(duration: 0.1)","    let meterUpdate = Animation.linear(duration: 0.05)","}"]},{"anchor":"Shape-System","type":"heading","text":"Shape System","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define the geometric language of your theme:"}]},{"type":"codeListing","syntax":"swift","code":["struct StudioProShapes: AudioUIShapes {","    \/\/ Corner radii","    let buttonCornerRadius: CGFloat = 6","    let knobCornerRadius: CGFloat = 24","    let panelCornerRadius: CGFloat = 8","    let cardCornerRadius: CGFloat = 12","    ","    \/\/ Border widths","    let hairlineBorder: CGFloat = 0.5","    let standardBorder: CGFloat = 1","    let emphasizedBorder: CGFloat = 2","    ","    \/\/ Shadow configurations","    let subtleShadow = ShadowStyle(","        color: .shadowDark,","        radius: 2,","        offset: CGPoint(x: 0, y: 1)","    )","    ","    let prominentShadow = ShadowStyle(","        color: .shadowDark,","        radius: 8,","        offset: CGPoint(x: 0, y: 4)","    )","    ","    let insetShadow = ShadowStyle(","        color: .shadowDark,","        radius: 4,","        offset: CGPoint(x: 0, y: -2),","        isInset: true","    )","}"]},{"anchor":"Component-Specific-Styling","type":"heading","text":"Component-Specific Styling","level":2},{"anchor":"Knob-Customization","type":"heading","text":"Knob Customization","level":3},{"inlineContent":[{"text":"Define how knobs should appear and behave in your theme:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension StudioProTheme {","    var knobStyle: KnobStyle {","        KnobStyle(","            trackColor: colorScheme.knobTrack,","            fillColor: colorScheme.knobThumb,","            thumbColor: colorScheme.primary,","            labelStyle: typography.knobLabel,","            ","            \/\/ Visual properties","            trackWidth: 3,","            fillWidth: 4,","            thumbSize: 6,","            ","            \/\/ Interaction","            rotationRange: .degrees(270),","            sensitivity: .standard,","            hapticFeedback: .enabled,","            ","            \/\/ Animation","            rotationAnimation: animations.knobRotation,","            hoverAnimation: animations.hoverTransition,","            ","            \/\/ Shadows","            shadowStyle: shapes.subtleShadow,","            ","            \/\/ Special effects","            glowEffect: GlowEffect(","                color: colorScheme.primary,","                radius: 8,","                intensity: 0.3","            )","        )","    }","}"]},{"text":"Button Customization","type":"heading","anchor":"Button-Customization","level":3},{"inlineContent":[{"text":"Define comprehensive button appearance and behavior:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension StudioProTheme {","    var buttonStyle: ButtonStyle {","        ButtonStyle(","            \/\/ Colors","            backgroundColor: colorScheme.componentDefault,","            foregroundColor: colorScheme.textPrimary,","            hoverBackgroundColor: colorScheme.componentHover,","            activeBackgroundColor: colorScheme.componentActive,","            disabledBackgroundColor: colorScheme.componentDisabled,","            ","            \/\/ Typography","            labelStyle: typography.buttonLabel,","            ","            \/\/ Geometry","            cornerRadius: shapes.buttonCornerRadius,","            borderWidth: shapes.standardBorder,","            borderColor: colorScheme.primary.opacity(0.3),","            ","            \/\/ Sizing","            minimumSize: spacing.buttonSize,","            contentPadding: EdgeInsets(","                top: 8, leading: 16, bottom: 8, trailing: 16","            ),","            ","            \/\/ Effects","            shadowStyle: shapes.subtleShadow,","            pressAnimation: animations.buttonPress,","            ","            \/\/ Interaction","            hapticFeedback: haptics.buttonPress,","            soundFeedback: sounds.buttonClick","        )","    }","}"]},{"text":"Level Meter Customization","type":"heading","anchor":"Level-Meter-Customization","level":3},{"inlineContent":[{"text":"Create themed level meters with professional appearance:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension StudioProTheme {","    var levelMeterStyle: LevelMeterStyle {","        LevelMeterStyle(","            \/\/ Segment colors","            segmentColors: [","                LevelRange(min: 0.0, max: 0.7): colorScheme.meterGreen,","                LevelRange(min: 0.7, max: 0.9): colorScheme.meterYellow,","                LevelRange(min: 0.9, max: 1.0): colorScheme.meterRed","            ],","            ","            \/\/ Background","            backgroundColor: colorScheme.componentDefault,","            trackColor: colorScheme.knobTrack,","            ","            \/\/ Geometry","            segmentSpacing: 1,","            cornerRadius: 2,","            borderWidth: 1,","            borderColor: colorScheme.primary.opacity(0.2),","            ","            \/\/ Peak indicators","            peakHoldColor: colorScheme.warning,","            peakHoldDuration: 2.0,","            peakDecayAnimation: animations.valueChange,","            ","            \/\/ Scale markings","            scaleColor: colorScheme.textSecondary,","            scaleFont: typography.meterLabel.font,","            showScale: true,","            ","            \/\/ Update behavior","            updateAnimation: animations.meterUpdate,","            smoothing: 0.8","        )","    }","}"],"type":"codeListing"},{"anchor":"Advanced-Theme-Features","text":"Advanced Theme Features","level":2,"type":"heading"},{"anchor":"Conditional-Styling","level":3,"text":"Conditional Styling","type":"heading"},{"inlineContent":[{"text":"Adapt your theme based on context and device capabilities:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension StudioProTheme {","    func adaptedStyle(for context: StyleContext) -> AudioUITheme {","        var adaptedTheme = self","        ","        \/\/ Adjust for device type","        switch context.deviceType {","        case .phone:","            adaptedTheme.spacing = spacing.scaled(by: 1.2)","            adaptedTheme.componentStyles.minimumTouchTarget = 50","            ","        case .pad:","            adaptedTheme.spacing = spacing.scaled(by: 1.1)","            ","        case .mac:","            adaptedTheme.spacing = spacing.scaled(by: 1.0)","            adaptedTheme.componentStyles.showHoverStates = true","        }","        ","        \/\/ Adjust for accessibility","        if context.accessibilitySettings.preferLargerText {","            adaptedTheme.typography = typography.scaled(by: 1.3)","        }","        ","        if context.accessibilitySettings.reduceMotion {","            adaptedTheme.animations = animations.withReducedMotion()","        }","        ","        \/\/ Adjust for performance","        if context.performanceProfile == .battery {","            adaptedTheme.animations = animations.withReducedComplexity()","            adaptedTheme.componentStyles.disableRealTimeEffects = true","        }","        ","        return adaptedTheme","    }","}"],"type":"codeListing"},{"anchor":"Dynamic-Color-Support","level":3,"text":"Dynamic Color Support","type":"heading"},{"inlineContent":[{"type":"text","text":"Support for system appearance changes and color blindness accessibility:"}],"type":"paragraph"},{"syntax":"swift","code":["extension StudioProColorScheme {","    static func adaptive(for colorScheme: ColorScheme, ","                        accessibility: AccessibilitySettings) -> StudioProColorScheme {","        var colors = StudioProColorScheme()","        ","        \/\/ Adapt for light\/dark mode","        if colorScheme == .light {","            colors.background = Color(red: 0.95, green: 0.95, blue: 0.97)","            colors.surface = Color(red: 0.98, green: 0.98, blue: 0.99)","            colors.textPrimary = Color.black","            colors.textSecondary = Color.black.opacity(0.7)","        }","        ","        \/\/ Adapt for color blindness","        if accessibility.colorBlindnessType != .none {","            colors = colors.adaptedForColorBlindness(accessibility.colorBlindnessType)","        }","        ","        \/\/ Increase contrast if needed","        if accessibility.increaseContrast {","            colors = colors.withIncreasedContrast()","        }","        ","        return colors","    }","}"],"type":"codeListing"},{"text":"Theme Implementation","level":2,"anchor":"Theme-Implementation","type":"heading"},{"text":"Applying Custom Themes","level":3,"anchor":"Applying-Custom-Themes","type":"heading"},{"inlineContent":[{"text":"Use your custom theme throughout your application:","type":"text"}],"type":"paragraph"},{"code":["struct AudioApp: App {","    @StateObject private var themeManager = ThemeManager()","    ","    var body: some Scene {","        WindowGroup {","            ContentView()","                .audioUITheme(themeManager.currentTheme)","                .onAppear {","                    themeManager.loadUserPreferences()","                }","        }","    }","}","","class ThemeManager: ObservableObject {","    @Published var currentTheme: AudioUITheme = StudioProTheme()","    ","    func setTheme(_ theme: AudioUITheme) {","        withAnimation(.easeInOut(duration: 0.3)) {","            currentTheme = theme","        }","        saveUserPreferences()","    }","    ","    private func saveUserPreferences() {","        UserDefaults.standard.set(currentTheme.name, forKey: \"selectedTheme\")","    }","    ","    func loadUserPreferences() {","        let savedThemeName = UserDefaults.standard.string(forKey: \"selectedTheme\")","        if let themeName = savedThemeName {","            currentTheme = ThemeRegistry.theme(named: themeName) ?? StudioProTheme()","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Theme Switching","level":3,"anchor":"Theme-Switching","type":"heading"},{"inlineContent":[{"text":"Provide users with the ability to switch between themes:","type":"text"}],"type":"paragraph"},{"code":["struct ThemeSelector: View {","    @ObservedObject var themeManager: ThemeManager","    ","    let availableThemes: [AudioUITheme] = [","        StudioProTheme(),","        VintageConsoleTheme(),","        MinimalStudioTheme(),","        DarkAnalogTheme()","    ]","    ","    var body: some View {","        ScrollView(.horizontal, showsIndicators: false) {","            HStack(spacing: 16) {","                ForEach(availableThemes, id: \\.name) { theme in","                    ThemePreview(theme: theme)","                        .onTapGesture {","                            themeManager.setTheme(theme)","                        }","                        .scaleEffect(","                            themeManager.currentTheme.name == theme.name ? 1.1 : 1.0","                        )","                        .animation(.spring(), value: themeManager.currentTheme.name)","                }","            }","            .padding()","        }","    }","}","","struct ThemePreview: View {","    let theme: AudioUITheme","    ","    var body: some View {","        VStack {","            \/\/ Mini preview of theme components","            HStack {","                Circle()","                    .fill(theme.colorScheme.primary)","                    .frame(width: 20, height: 20)","                ","                Rectangle()","                    .fill(theme.colorScheme.componentDefault)","                    .frame(width: 30, height: 8)","                    .cornerRadius(4)","            }","            ","            Text(theme.name)","                .font(.caption)","                .foregroundColor(theme.colorScheme.textPrimary)","        }","        .padding()","        .background(theme.colorScheme.background)","        .cornerRadius(8)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Custom themes enable you to create distinctive, cohesive visual identities for your audio applications while maintaining the professional functionality and interaction patterns that AudioUI provides."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"topicSections":[{"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUITheme"],"title":"Theme Architecture","anchor":"Theme-Architecture"}],"variants":[{"paths":["\/documentation\/audioui\/customthemes"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"title":"Custom Themes","modules":[{"name":"AudioUI"}],"role":"collectionGroup","roleHeading":"API Collection"},"kind":"article","identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/CustomThemes","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/LooksAndFeels","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/BuiltInThemes"],"title":"Theming & Customization","anchor":"Theming--Customization","generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI/LooksAndFeels":{"type":"topic","url":"\/documentation\/audioui\/looksandfeels","role":"collectionGroup","kind":"article","title":"Looks and Feels","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/LooksAndFeels","abstract":[{"type":"text","text":"The visual appearance system that defines how AudioUI components render across different design aesthetics and interaction paradigms."}]},"doc://audiouiswift.AudioUI/documentation/AudioUI/ThemingGuide":{"title":"Theming Guide","role":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","kind":"article","abstract":[{"text":"Master AudioUIâ€™s powerful theming system to create stunning, branded audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/themingguide","type":"topic"},"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/AudioUITheme":{"title":"AudioUITheme Module","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUITheme","type":"topic","abstract":[{"text":"Advanced theming system that separates visual appearance (Looks) from interaction behavior (Feels), enabling sophisticated and consistent audio interface design.","type":"text"}],"kind":"article","url":"\/documentation\/audioui\/audiouitheme","role":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/BuiltInThemes":{"title":"Built-in Themes","url":"\/documentation\/audioui\/builtinthemes","kind":"article","abstract":[{"type":"text","text":"Explore AudioUIâ€™s collection of professionally designed themes that provide instant visual coherence for different audio application types and user preferences."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/BuiltInThemes","type":"topic","role":"collectionGroup"}}}