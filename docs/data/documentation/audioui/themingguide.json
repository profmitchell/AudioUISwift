{"sections":[],"primaryContentSections":[{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"AudioUI‚Äôs revolutionary theming system separates visual design from interaction behavior, giving you unprecedented control over your interface‚Äôs look and feel. This architectural approach allows you to create interfaces that are uniquely yours while maintaining the precision and responsiveness that professional audio applications demand.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether you‚Äôre building a clean, minimal DAW interface or an immersive, tactile virtual instrument, AudioUI‚Äôs theming system provides the tools to bring your vision to life."}]},{"level":2,"type":"heading","text":"Core Theming Concepts","anchor":"Core-Theming-Concepts"},{"level":3,"type":"heading","text":"üé® Looks: Visual Identity","anchor":"%F0%9F%8E%A8-Looks-Visual-Identity"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A ‚ÄúLook‚Äù defines every visual aspect of your interface:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Color palettes"}],"type":"strong"},{"text":" including primary, secondary, accent, and semantic colors","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Visual effects"}],"type":"strong"},{"text":" like shadows, gradients, glows, and transparency","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Typography"}]},{"type":"text","text":" with consistent font weights, sizes, and spacing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Geometry"}]},{"type":"text","text":" including corner radius, border styles, and proportions"}]}]}]},{"level":3,"type":"heading","text":"‚ö° Feels: Interaction Personality","anchor":"%E2%9A%A1-Feels-Interaction-Personality"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A ‚ÄúFeel‚Äù controls how your interface responds to user interaction:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Animation curves"}],"type":"strong"},{"text":" and timing for smooth, responsive feedback","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Touch sensitivity"}],"type":"strong"},{"type":"text","text":" and gesture recognition thresholds"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Visual transitions"}]},{"type":"text","text":" between states (idle, pressed, dragging)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Haptic feedback"}]},{"type":"text","text":" intensity and patterns"}]}]}]},{"level":3,"type":"heading","text":"üé≠ Themes: Complete Experiences","anchor":"%F0%9F%8E%AD-Themes-Complete-Experiences"},{"type":"paragraph","inlineContent":[{"text":"A ‚ÄúTheme‚Äù marries a Look with a Feel to create cohesive user experiences:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Consistency"}]},{"type":"text","text":" across all components with unified design language"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Flexibility"}]},{"type":"text","text":" to mix different Looks and Feels as needed"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Customization"}]},{"text":" through inheritance and property overrides","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performance"}]},{"type":"text","text":" with optimized rendering and minimal state changes"}]}]}]},{"level":2,"type":"heading","text":"Quick Start: Built-in Themes","anchor":"Quick-Start-Built-in-Themes"},{"type":"paragraph","inlineContent":[{"text":"Transform your interface instantly with AudioUI‚Äôs professionally crafted themes:","type":"text"}]},{"code":["import SwiftUI","import AudioUI","import AudioUITheme","","struct MyAudioInterface: View {","    @State private var volume: Double = 0.7","    @State private var cutoff: Double = 0.5","    @State private var position = CGPoint(x: 0.5, y: 0.5)","    ","    var body: some View {","        VStack(spacing: 40) {","            Text(\"Professional Audio Interface\")","                .audioUITitle()","            ","            HStack(spacing: 50) {","                \/\/ Volume control","                VStack(spacing: 15) {","                    Text(\"VOLUME\")","                        .audioUILabel(.parameter)","                    ","                    InsetNeumorphicKnob(value: $volume)","                        .frame(width: 120, height: 120)","                    ","                    Text(\"\\(Int(volume * 100))%\")","                        .audioUILabel(.value)","                }","                ","                \/\/ Filter cutoff","                VStack(spacing: 15) {","                    Text(\"CUTOFF\")","                        .audioUILabel(.parameter)","                    ","                    VerticalInsetSlider(value: $cutoff)","                        .frame(width: 40, height: 200)","                    ","                    Text(\"\\(Int(cutoff * 20000))Hz\")","                        .audioUILabel(.value)","                }","            }","            ","            \/\/ XY Control","            XYPadMinimal1(position: $position)","                .frame(width: 300, height: 300)","        }","        .theme(.audioUINeumorphic) \/\/ Professional neumorphic theme","        .padding(40)","    }","}","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"type":"heading","text":"Available Built-in Themes","anchor":"Available-Built-in-Themes"},{"code":["\/\/ Professional themes",".theme(.audioUI)     \/\/ Clean, geometric design",".theme(.darkPro)           \/\/ Professional studio standard",".theme(.ultraClean)        \/\/ Maximum clarity and accessibility","","\/\/ Creative themes  ",".theme(.audioUINeumorphic) \/\/ Soft, tactile surfaces",".theme(.sunset)            \/\/ Warm, inspiring gradients",".theme(.ocean)             \/\/ Cool, calming blues"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Theme Switching and Comparison","anchor":"Theme-Switching-and-Comparison"},{"type":"paragraph","inlineContent":[{"text":"One of the best ways to understand theming is to see the same interface with different themes:","type":"text"}]},{"code":["struct ThemeComparisonView: View {","    @State private var selectedTheme = 0","    @State private var value: Double = 0.5","    ","    let themes: [(String, Theme)] = [","        (\"Minimal\", .audioUIMinimal),","        (\"Neumorphic\", .audioUINeumorphic), ","        (\"Dark Pro\", .darkPro),","        (\"Sunset\", .sunset),","        (\"Ocean\", .ocean),","        (\"Ultra Clean\", .ultraClean)","    ]","    ","    var body: some View {","        VStack(spacing: 30) {","            Text(\"Theme Comparison\")","                .font(.title)","            ","            \/\/ Theme selector","            Picker(\"Theme\", selection: $selectedTheme) {","                ForEach(0..<themes.count, id: \\.self) { index in","                    Text(themes[index].0)","                }","            }","            .pickerStyle(SegmentedPickerStyle())","            ","            \/\/ Same control, different theme","            VStack(spacing: 20) {","                InsetNeumorphicKnob(value: $value)","                    .frame(width: 100, height: 100)","                ","                VerticalInsetSlider(value: $value)","                    .frame(width: 60, height: 150)","            }","            .theme(themes[selectedTheme].1)","            ","            Text(\"Notice how the same functionality feels completely different!\")","                .font(.caption)","                .multilineTextAlignment(.center)","        }","        .padding()","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Creating Custom Looks","anchor":"Creating-Custom-Looks"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When built-in themes don‚Äôt match your brand, create a custom Look:"}]},{"code":["import SwiftUI","import AudioUITheme","","struct BrandLook: Look {","    \/\/ Your brand colors","    let brandPrimary = Color(hex: \"#6C5CE7\")    \/\/ Purple","    let brandSecondary = Color(hex: \"#A29BFE\")  \/\/ Light purple","    ","    \/\/ Surface colors for your interface","    var surface: Color { Color(hex: \"#2D3436\") }","    var surfacePressed: Color { Color(hex: \"#636E72\") }","    var surfaceElevated: Color { Color(hex: \"#636E72\") }","    ","    \/\/ Interactive state colors","    var interactiveIdle: Color { brandPrimary.opacity(0.7) }","    var interactiveHover: Color { brandPrimary.opacity(0.9) }","    var interactivePressed: Color { brandPrimary }","    var interactiveDisabled: Color { Color.gray.opacity(0.3) }","    ","    \/\/ Text colors for readability","    var textPrimary: Color { Color.white }","    var textSecondary: Color { Color.white.opacity(0.8) }","    var textTertiary: Color { Color.white.opacity(0.6) }","    ","    \/\/ Accent colors for highlights","    var accent: Color { brandSecondary }","    var accentSecondary: Color { Color(hex: \"#00B894\") } \/\/ Green accent","    ","    \/\/ Effect colors for depth and atmosphere","    var shadowDark: Color { Color.black.opacity(0.6) }","    var shadowLight: Color { Color.white.opacity(0.1) }","    var glassBorder: Color { Color.white.opacity(0.2) }","    var glowPrimary: Color { brandPrimary }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Creating Custom Feels","anchor":"Creating-Custom-Feels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define how your interface responds to user interaction:"}]},{"code":["struct BrandFeel: Feel {","    \/\/ Shape properties","    let cornerRadius: CGFloat = 16     \/\/ Rounded corners","    let borderWidth: CGFloat = 1       \/\/ Subtle borders","    ","    \/\/ Shadow properties for depth","    let shadowRadius: CGFloat = 12","    let shadowOpacity: Double = 0.4","    ","    \/\/ Effect properties for premium feel","    let glowIntensity: Double = 0.8","    let blurRadius: CGFloat = 8","    ","    \/\/ Animation properties for responsiveness","    let animationDuration: Double = 0.3","    let animationCurve = Animation.spring(","        response: 0.4, ","        dampingFraction: 0.8","    )","    ","    \/\/ Custom container styling","    func applyToContainer<Content: View>(_ content: Content, look: Look) -> some View {","        content","            .background(","                RoundedRectangle(cornerRadius: cornerRadius)","                    .fill(","                        LinearGradient(","                            colors: [","                                look.surface,","                                look.surfacePressed","                            ],","                            startPoint: .topLeading,","                            endPoint: .bottomTrailing","                        )","                    )","                    .shadow(","                        color: look.shadowDark.opacity(shadowOpacity),","                        radius: shadowRadius,","                        x: 0, y: 4","                    )","            )","            .overlay(","                RoundedRectangle(cornerRadius: cornerRadius)","                    .stroke(look.glassBorder, lineWidth: borderWidth)","            )","    }","    ","    \/\/ Custom button interaction feedback","    func applyToButton<Content: View>(_ content: Content, look: Look, isPressed: Bool) -> some View {","        content","            .scaleEffect(isPressed ? 0.95 : 1.0)","            .brightness(isPressed ? -0.1 : 0)","            .overlay(","                RoundedRectangle(cornerRadius: cornerRadius * 0.5)","                    .fill(","                        isPressed ?","                        look.glowPrimary.opacity(glowIntensity * 0.3) :","                        Color.clear","                    )","                    .blur(radius: blurRadius)","            )","            .animation(animationCurve, value: isPressed)","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Combining Look and Feel","anchor":"Combining-Look-and-Feel"},{"type":"paragraph","inlineContent":[{"text":"Create your complete custom theme:","type":"text"}]},{"code":["let brandTheme = Theme(","    look: BrandLook(),","    feel: BrandFeel()",")","","struct BrandedInterface: View {","    @State private var volume: Double = 0.5","    @State private var frequency: Double = 0.5","    ","    var body: some View {","        VStack(spacing: 30) {","            Text(\"My Audio App\")","                .font(.largeTitle)","                .fontWeight(.bold)","            ","            HStack(spacing: 40) {","                VStack {","                    Text(\"Volume\")","                        .font(.headline)","                    InsetNeumorphicKnob(value: $volume)","                        .frame(width: 80, height: 80)","                }","                ","                VStack {","                    Text(\"Frequency\")","                        .font(.headline)","                    KnobMinimal1(value: $frequency)","                        .frame(width: 80, height: 80)","                }","            }","        }","        .padding()","        .theme(brandTheme) \/\/ Apply your custom theme","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Dynamic Theme Switching","anchor":"Dynamic-Theme-Switching"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow users to choose their preferred theme:"}]},{"code":["struct ThemeSettings: View {","    @AppStorage(\"selectedTheme\") private var selectedTheme = \"darkPro\"","    ","    let availableThemes: [String: Theme] = [","        \"Minimal\": .audioUIMinimal,","        \"Neumorphic\": .audioUINeumorphic,","        \"Dark Pro\": .darkPro,","        \"Sunset\": .sunset,","        \"Ocean\": .ocean,","        \"Ultra Clean\": .ultraClean","    ]","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"Choose Your Theme\")","                .font(.title)","            ","            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 20) {","                ForEach(Array(availableThemes.keys), id: \\.self) { themeName in","                    ThemePreviewCard(","                        name: themeName,","                        theme: availableThemes[themeName]!,","                        isSelected: selectedTheme == themeName","                    ) {","                        selectedTheme = themeName","                    }","                }","            }","        }","        .padding()","    }","}","","struct ThemePreviewCard: View {","    let name: String","    let theme: Theme","    let isSelected: Bool","    let onSelect: () -> Void","    ","    var body: some View {","        VStack(spacing: 12) {","            Text(name)","                .font(.caption)","                .fontWeight(.medium)","            ","            \/\/ Mini preview of the theme","            HStack(spacing: 8) {","                KnobMinimal1(value: .constant(0.6))","                    .frame(width: 30, height: 30)","                VerticalInsetSlider(value: .constant(0.7))","                    .frame(width: 15, height: 40)","            }","            .theme(theme)","            .scaleEffect(0.8)","        }","        .padding()","        .background(","            RoundedRectangle(cornerRadius: 12)","                .fill(Color.gray.opacity(0.1))","                .stroke(","                    isSelected ? Color.blue : Color.clear,","                    lineWidth: 2","                )","        )","        .onTapGesture {","            onSelect()","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Context-Aware Theming","anchor":"Context-Aware-Theming"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adapt themes based on user context:"}]},{"code":["struct ContextualThemeView: View {","    @Environment(\\.colorScheme) var colorScheme","    @State private var isCreativeMode = false","    @State private var isLowLight = false","    ","    var contextualTheme: Theme {","        switch (isCreativeMode, isLowLight, colorScheme) {","        case (true, _, _):","            return .audioUINeumorphic  \/\/ Creative mode","        case (false, true, _):","            return .darkPro           \/\/ Low light professional","        case (false, false, .dark):","            return .audioUIMinimal    \/\/ Dark mode minimal","        case (false, false, .light):","            return .ultraClean        \/\/ Light mode clean","        }","    }","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"Context-Aware Interface\")","                .font(.title)","            ","            \/\/ Context controls","            VStack(spacing: 10) {","                Toggle(\"Creative Mode\", isOn: $isCreativeMode)","                Toggle(\"Low Light Environment\", isOn: $isLowLight)","            }","            .padding()","            .background(Color.gray.opacity(0.1))","            .cornerRadius(12)","            ","            \/\/ Interface that adapts to context","            YourAudioInterface()","                .theme(contextualTheme)","                .animation(.easeInOut(duration: 0.3), value: contextualTheme)","        }","        .padding()","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Accessibility in Theming","anchor":"Accessibility-in-Theming"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ensure your themes are accessible to all users:"}]},{"code":["struct AccessibleLook: Look {","    \/\/ High contrast colors for visibility","    var textPrimary: Color { Color.white }","    var surface: Color { Color.black }           \/\/ High contrast ratio","    ","    \/\/ Clear state differentiation","    var interactiveIdle: Color { Color(hex: \"#0080FF\") }    \/\/ Blue","    var interactiveHover: Color { Color(hex: \"#40A0FF\") }   \/\/ Lighter blue","    var interactivePressed: Color { Color(hex: \"#0060C0\") } \/\/ Darker blue","    ","    \/\/ Colorblind-friendly accents","    var accent: Color { Color(hex: \"#00FF00\") }         \/\/ Green","    var accentSecondary: Color { Color(hex: \"#FF8000\") } \/\/ Orange","    ","    \/\/ Ensure sufficient contrast for readability","    var textSecondary: Color { Color.white.opacity(0.9) }","    var textTertiary: Color { Color.white.opacity(0.8) }","}","","struct AccessibleFeel: Feel {","    \/\/ Longer animations for motor accessibility","    let animationDuration: Double = 0.5","    let animationCurve = Animation.easeInOut(duration: 0.5)","    ","    \/\/ Larger touch targets","    let cornerRadius: CGFloat = 8","    let borderWidth: CGFloat = 2  \/\/ More visible borders","    ","    \/\/ Reduced motion for vestibular sensitivity","    let shadowRadius: CGFloat = 0","    let shadowOpacity: Double = 0","    let glowIntensity: Double = 0","    let blurRadius: CGFloat = 0","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Performance Optimization","anchor":"Performance-Optimization"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Design themes for optimal performance in real-time audio applications:"}]},{"code":["struct PerformantLook: Look {","    \/\/ Use solid colors instead of gradients when possible","    var surface: Color { Color(hex: \"#2A2A2A\") }","    var surfacePressed: Color { Color(hex: \"#1A1A1A\") }","    ","    \/\/ Limit complex color calculations","    var interactiveIdle: Color { Color.blue }","    var interactiveHover: Color { Color.blue.opacity(0.8) }","    var interactivePressed: Color { Color.blue.opacity(0.6) }","}","","struct PerformantFeel: Feel {","    \/\/ Shorter animations for real-time responsiveness","    let animationDuration: Double = 0.1","    let animationCurve = Animation.linear(duration: 0.1)","    ","    \/\/ Minimize expensive effects","    let shadowRadius: CGFloat = 0","    let glowIntensity: Double = 0","    let blurRadius: CGFloat = 0","    ","    \/\/ Simple container styling","    func applyToContainer<Content: View>(_ content: Content, look: Look) -> some View {","        content","            .background(","                Rectangle()","                    .fill(look.surface)","            )","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Testing Your Themes","anchor":"Testing-Your-Themes"},{"type":"paragraph","inlineContent":[{"text":"Validate your themes across different scenarios:","type":"text"}]},{"code":["struct ThemeTestingSuite: View {","    let testTheme: Theme","    ","    var body: some View {","        ScrollView {","            VStack(spacing: 30) {","                \/\/ Test all component types","                ComponentTestGroup(title: \"Knobs\") {","                    HStack {","                        KnobMinimal1(value: .constant(0.3))","                        InsetNeumorphicKnob(value: .constant(0.7))","                    }","                }","                ","                ComponentTestGroup(title: \"Sliders\") {","                    HStack {","                        VerticalInsetSlider(value: .constant(0.5))","                            .frame(height: 100)","                        SliderMinimal1(value: .constant(0.8))","                    }","                }","                ","                ComponentTestGroup(title: \"Buttons\") {","                    HStack {","                        InsetToggleButton(label: \"MUTE\", isOn: .constant(false))","                        NeumorphicButton1(isActive: .constant(true), label: \"PLAY\")","                    }","                }","                ","                \/\/ Test different states","                ComponentTestGroup(title: \"States\") {","                    VStack {","                        Text(\"Normal State\")","                        Text(\"Pressed State\")","                        Text(\"Disabled State\")","                    }","                }","            }","            .padding()","        }","        .theme(testTheme)","    }","}","","struct ComponentTestGroup<Content: View>: ViewBuilder {","    let title: String","    @ViewBuilder let content: Content","    ","    var body: some View {","        VStack(spacing: 12) {","            Text(title)","                .font(.headline)","            content","        }","        .padding()","        .background(Color.gray.opacity(0.1))","        .cornerRadius(12)","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Best Practices","anchor":"Best-Practices"},{"level":3,"type":"heading","text":"Do‚Äôs:","anchor":"Dos"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Test accessibility","type":"text"}]},{"type":"text","text":": Ensure sufficient color contrast and clear state differentiation"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Consider context"}]},{"type":"text","text":": Professional vs creative applications need different approaches"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Test performance"}]},{"text":": Monitor frame rates, especially with complex visual effects","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Provide options"}]},{"text":": Let users choose themes that work for their needs","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Stay consistent"}]},{"type":"text","text":": Use your theme system throughout your entire application"}],"type":"paragraph"}]}]},{"level":3,"type":"heading","text":"Don‚Äôts:","anchor":"Donts"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Don‚Äôt over-animate","type":"text"}]},{"text":": Excessive motion can distract from audio work","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Don‚Äôt sacrifice readability"}],"type":"strong"},{"type":"text","text":": Beautiful themes mean nothing if users can‚Äôt read text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Don‚Äôt ignore platform conventions"}],"type":"strong"},{"text":": Respect iOS\/macOS design expectations","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Don‚Äôt make everything neon"}]},{"type":"text","text":": High contrast doesn‚Äôt mean everything needs to glow"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Don‚Äôt forget dark environments"}],"type":"strong"},{"text":": Audio work often happens in dim studios","type":"text"}],"type":"paragraph"}]}]},{"level":2,"type":"heading","text":"Conclusion","anchor":"Conclusion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"AudioUI‚Äôs theming system gives you the power to create audio interfaces that look exactly how you envision while maintaining the performance and precision that audio applications demand. Whether you use the built-in themes or create completely custom ones, you‚Äôll have the tools to build professional, beautiful, and accessible audio interfaces."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Start with the built-in themes to understand the system, then gradually customize or create your own themes as your needs become more specific. Remember that the best audio interface is one that disappears into the background, letting users focus on their creative work while providing all the control and feedback they need."}]}],"kind":"content"}],"metadata":{"roleHeading":"Article","title":"Theming Guide","modules":[{"name":"AudioUI"}],"role":"article"},"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/audioui\/themingguide"]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide"},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Master AudioUI‚Äôs powerful theming system to create stunning, branded audio interfaces.","type":"text"}],"seeAlsoSections":[{"anchor":"Theming--Customization","title":"Theming & Customization","identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/LooksAndFeels","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/CustomThemes","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/BuiltInThemes"],"generated":true}],"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI/BuiltInThemes":{"title":"Built-in Themes","url":"\/documentation\/audioui\/builtinthemes","kind":"article","abstract":[{"type":"text","text":"Explore AudioUI‚Äôs collection of professionally designed themes that provide instant visual coherence for different audio application types and user preferences."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/BuiltInThemes","type":"topic","role":"collectionGroup"},"doc://audiouiswift.AudioUI/documentation/AudioUI/LooksAndFeels":{"type":"topic","url":"\/documentation\/audioui\/looksandfeels","role":"collectionGroup","kind":"article","title":"Looks and Feels","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/LooksAndFeels","abstract":[{"type":"text","text":"The visual appearance system that defines how AudioUI components render across different design aesthetics and interaction paradigms."}]},"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/CustomThemes":{"title":"Custom Themes","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/CustomThemes","role":"collectionGroup","kind":"article","url":"\/documentation\/audioui\/customthemes","type":"topic","abstract":[{"type":"text","text":"Create and implement custom visual themes that define the complete appearance and behavior of AudioUI components across your application."}]}}}