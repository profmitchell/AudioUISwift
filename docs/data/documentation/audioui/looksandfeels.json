{"topicSections":[{"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Look","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Feel"],"title":"Core Protocols","anchor":"Core-Protocols"}],"sections":[],"abstract":[{"text":"The visual appearance system that defines how AudioUI components render across different design aesthetics and interaction paradigms.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"AudioUIâ€™s Looks and Feels system provides a powerful abstraction layer that separates component behavior from visual appearance. This architecture enables the same functional component to render with completely different visual styles while maintaining consistent interaction patterns."}]},{"type":"heading","text":"Core Concepts","anchor":"Core-Concepts","level":2},{"type":"heading","text":"Look Protocol","anchor":"Look-Protocol","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Look","type":"codeVoice"},{"type":"text","text":" protocol defines how a component should be visually rendered, handling drawing, colors, shadows, and visual effects."}]},{"syntax":"swift","type":"codeListing","code":["public protocol Look {","    \/\/\/ The visual style identifier","    var name: String { get }","    ","    \/\/\/ Primary color scheme","    var colorScheme: ColorScheme { get }","    ","    \/\/\/ Render a component with this look","    func render<Component: AudioUIComponent>(","        _ component: Component,","        in context: RenderContext","    ) -> some View","    ","    \/\/\/ Animation preferences for this look","    var animationStyle: AnimationStyle { get }","    ","    \/\/\/ Shadow configuration","    var shadowConfiguration: ShadowConfiguration { get }","}"]},{"type":"heading","text":"Feel Protocol","anchor":"Feel-Protocol","level":3},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Feel","type":"codeVoice"},{"type":"text","text":" protocol defines interaction behaviors, haptic feedback, and response characteristics."}]},{"syntax":"swift","type":"codeListing","code":["public protocol Feel {","    \/\/\/ The interaction style identifier","    var name: String { get }","    ","    \/\/\/ Haptic feedback configuration","    var hapticConfiguration: HapticConfiguration { get }","    ","    \/\/\/ Touch response characteristics","    var touchResponse: TouchResponse { get }","    ","    \/\/\/ Handle component interaction","    func handleInteraction<Component: AudioUIComponent>(","        for component: Component,","        interaction: InteractionEvent","    )","    ","    \/\/\/ Animation timing for interactions","    var interactionTiming: AnimationTiming { get }","}"]},{"text":"Built-in Looks","level":2,"anchor":"Built-in-Looks","type":"heading"},{"text":"Neumorphic Look","level":3,"anchor":"Neumorphic-Look","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Soft, raised surfaces that appear to emerge from the background.","type":"text"}]},{"syntax":"swift","code":["struct NeumorphicLook: Look {","    let name = \"neumorphic\"","    let colorScheme: ColorScheme = .adaptive","    ","    var shadowConfiguration: ShadowConfiguration {","        ShadowConfiguration(","            light: Shadow(","                color: .white.opacity(0.8),","                radius: 4,","                offset: CGPoint(x: -2, y: -2)","            ),","            dark: Shadow(","                color: .black.opacity(0.3),","                radius: 6,","                offset: CGPoint(x: 3, y: 3)","            )","        )","    }","    ","    func render<Component: AudioUIComponent>(","        _ component: Component,","        in context: RenderContext","    ) -> some View {","        component","            .background(","                RoundedRectangle(cornerRadius: context.cornerRadius)","                    .fill(context.backgroundColor)","                    .shadow(","                        color: shadowConfiguration.light.color,","                        radius: shadowConfiguration.light.radius,","                        x: shadowConfiguration.light.offset.x,","                        y: shadowConfiguration.light.offset.y","                    )","                    .shadow(","                        color: shadowConfiguration.dark.color,","                        radius: shadowConfiguration.dark.radius,","                        x: shadowConfiguration.dark.offset.x,","                        y: shadowConfiguration.dark.offset.y","                    )","            )","    }","}"],"type":"codeListing"},{"level":3,"anchor":"Minimal-Look","text":"Minimal Look","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Clean, flat design with subtle borders and minimal visual effects."}]},{"syntax":"swift","code":["struct MinimalLook: Look {","    let name = \"minimal\"","    let colorScheme: ColorScheme = .light","    ","    var shadowConfiguration: ShadowConfiguration {","        ShadowConfiguration(","            light: Shadow.none,","            dark: Shadow(","                color: .black.opacity(0.1),","                radius: 1,","                offset: CGPoint(x: 0, y: 1)","            )","        )","    }","    ","    func render<Component: AudioUIComponent>(","        _ component: Component,","        in context: RenderContext","    ) -> some View {","        component","            .background(","                RoundedRectangle(cornerRadius: 2)","                    .fill(context.backgroundColor)","                    .stroke(context.borderColor, lineWidth: 1)","            )","            .shadow(","                color: shadowConfiguration.dark.color,","                radius: shadowConfiguration.dark.radius,","                x: shadowConfiguration.dark.offset.x,","                y: shadowConfiguration.dark.offset.y","            )","    }","}"],"type":"codeListing"},{"level":3,"anchor":"Vintage-Look","text":"Vintage Look","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Warm, analog-inspired aesthetics with rich textures and gradients.","type":"text"}]},{"syntax":"swift","code":["struct VintageLook: Look {","    let name = \"vintage\"","    let colorScheme: ColorScheme = .dark","    ","    var shadowConfiguration: ShadowConfiguration {","        ShadowConfiguration(","            light: Shadow(","                color: .orange.opacity(0.2),","                radius: 3,","                offset: CGPoint(x: -1, y: -1)","            ),","            dark: Shadow(","                color: .brown.opacity(0.6),","                radius: 8,","                offset: CGPoint(x: 2, y: 4)","            )","        )","    }","    ","    func render<Component: AudioUIComponent>(","        _ component: Component,","        in context: RenderContext","    ) -> some View {","        component","            .background(","                RoundedRectangle(cornerRadius: context.cornerRadius)","                    .fill(","                        LinearGradient(","                            colors: [","                                Color.brown.opacity(0.8),","                                Color.orange.opacity(0.4)","                            ],","                            startPoint: .topLeading,","                            endPoint: .bottomTrailing","                        )","                    )","                    .overlay(","                        RoundedRectangle(cornerRadius: context.cornerRadius)","                            .stroke(","                                LinearGradient(","                                    colors: [.copper, .gold],","                                    startPoint: .top,","                                    endPoint: .bottom","                                ),","                                lineWidth: 2","                            )","                    )","            )","            .shadow(","                color: shadowConfiguration.dark.color,","                radius: shadowConfiguration.dark.radius,","                x: shadowConfiguration.dark.offset.x,","                y: shadowConfiguration.dark.offset.y","            )","    }","}"],"type":"codeListing"},{"level":2,"anchor":"Built-in-Feels","text":"Built-in Feels","type":"heading"},{"level":3,"anchor":"Precise-Feel","text":"Precise Feel","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Responsive, immediate feedback for precise control scenarios.","type":"text"}]},{"syntax":"swift","code":["struct PreciseFeel: Feel {","    let name = \"precise\"","    ","    var hapticConfiguration: HapticConfiguration {","        HapticConfiguration(","            enabled: true,","            lightFeedback: .selection,","            mediumFeedback: .impactLight,","            heavyFeedback: .impactMedium","        )","    }","    ","    var touchResponse: TouchResponse {","        TouchResponse(","            sensitivity: .high,","            dampening: .minimal,","            acceleration: .linear","        )","    }","    ","    var interactionTiming: AnimationTiming {","        AnimationTiming(","            duration: 0.1,","            curve: .easeOut","        )","    }","    ","    func handleInteraction<Component: AudioUIComponent>(","        for component: Component,","        interaction: InteractionEvent","    ) {","        switch interaction.type {","        case .began:","            HapticEngine.shared.playFeedback(","                hapticConfiguration.lightFeedback","            )","        case .changed:","            \/\/ Continuous feedback for drag operations","            if interaction.velocity > 0.5 {","                HapticEngine.shared.playFeedback(","                    hapticConfiguration.mediumFeedback","                )","            }","        case .ended:","            HapticEngine.shared.playFeedback(","                hapticConfiguration.heavyFeedback","            )","        }","    }","}"],"type":"codeListing"},{"level":3,"anchor":"Smooth-Feel","text":"Smooth Feel","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Fluid, comfortable interactions with gentle feedback.","type":"text"}]},{"syntax":"swift","code":["struct SmoothFeel: Feel {","    let name = \"smooth\"","    ","    var hapticConfiguration: HapticConfiguration {","        HapticConfiguration(","            enabled: true,","            lightFeedback: .selection,","            mediumFeedback: .impactLight,","            heavyFeedback: .impactLight","        )","    }","    ","    var touchResponse: TouchResponse {","        TouchResponse(","            sensitivity: .medium,","            dampening: .moderate,","            acceleration: .easeInOut","        )","    }","    ","    var interactionTiming: AnimationTiming {","        AnimationTiming(","            duration: 0.3,","            curve: .easeInOut","        )","    }","    ","    func handleInteraction<Component: AudioUIComponent>(","        for component: Component,","        interaction: InteractionEvent","    ) {","        \/\/ Gentle haptic feedback","        if interaction.type == .began {","            HapticEngine.shared.playFeedback(","                hapticConfiguration.lightFeedback","            )","        }","    }","}"],"type":"codeListing"},{"level":2,"anchor":"Custom-Look-Creation","text":"Custom Look Creation","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Creating a custom look involves implementing the ","type":"text"},{"type":"codeVoice","code":"Look"},{"text":" protocol:","type":"text"}]},{"syntax":"swift","code":["struct MetalLook: Look {","    let name = \"metal\"","    let colorScheme: ColorScheme = .dark","    ","    var animationStyle: AnimationStyle {","        AnimationStyle(","            springResponse: 0.6,","            springDampingFraction: 0.8","        )","    }","    ","    var shadowConfiguration: ShadowConfiguration {","        ShadowConfiguration(","            light: Shadow(","                color: .white.opacity(0.1),","                radius: 2,","                offset: CGPoint(x: -1, y: -1)","            ),","            dark: Shadow(","                color: .black.opacity(0.8),","                radius: 12,","                offset: CGPoint(x: 4, y: 6)","            )","        )","    }","    ","    func render<Component: AudioUIComponent>(","        _ component: Component,","        in context: RenderContext","    ) -> some View {","        component","            .background(","                RoundedRectangle(cornerRadius: context.cornerRadius)","                    .fill(","                        RadialGradient(","                            colors: [","                                Color.gray.opacity(0.9),","                                Color.black.opacity(0.7)","                            ],","                            center: .topLeading,","                            startRadius: 10,","                            endRadius: 100","                        )","                    )","                    .overlay(","                        \/\/ Metallic highlight","                        RoundedRectangle(cornerRadius: context.cornerRadius)","                            .stroke(","                                LinearGradient(","                                    colors: [","                                        .white.opacity(0.3),","                                        .clear,","                                        .white.opacity(0.1)","                                    ],","                                    startPoint: .topLeading,","                                    endPoint: .bottomTrailing","                                ),","                                lineWidth: 1","                            )","                    )","            )","            .shadow(","                color: shadowConfiguration.dark.color,","                radius: shadowConfiguration.dark.radius,","                x: shadowConfiguration.dark.offset.x,","                y: shadowConfiguration.dark.offset.y","            )","    }","}"],"type":"codeListing"},{"type":"heading","text":"Custom Feel Creation","level":2,"anchor":"Custom-Feel-Creation"},{"type":"paragraph","inlineContent":[{"text":"Creating a custom feel for specialized interaction patterns:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct VintageAnalogFeel: Feel {","    let name = \"vintage_analog\"","    ","    var hapticConfiguration: HapticConfiguration {","        HapticConfiguration(","            enabled: true,","            lightFeedback: .selection,","            mediumFeedback: .impactMedium,","            heavyFeedback: .impactHeavy","        )","    }","    ","    var touchResponse: TouchResponse {","        TouchResponse(","            sensitivity: .low,","            dampening: .heavy,","            acceleration: .custom(","                \/\/ Simulate analog component inertia","                curve: { progress in","                    let resistance = 0.3","                    return pow(progress, 1.0 + resistance)","                }","            )","        )","    }","    ","    var interactionTiming: AnimationTiming {","        AnimationTiming(","            duration: 0.4,","            curve: .custom(","                \/\/ Analog-style settling","                curve: { t in","                    let overshoot = sin(t * .pi * 3) * exp(-t * 4) * 0.1","                    return t + overshoot","                }","            )","        )","    }","    ","    func handleInteraction<Component: AudioUIComponent>(","        for component: Component,","        interaction: InteractionEvent","    ) {","        switch interaction.type {","        case .began:","            \/\/ Simulate mechanical engagement","            HapticEngine.shared.playCustomPattern([","                .impact(.light, delay: 0),","                .impact(.medium, delay: 0.05)","            ])","            ","        case .changed:","            \/\/ Simulate detent positions for knobs","            if let knob = component as? KnobComponent {","                let detentPositions = knob.detentPositions","                let currentPosition = knob.normalizedValue","                ","                if detentPositions.contains(where: { ","                    abs($0 - currentPosition) < 0.02 ","                }) {","                    HapticEngine.shared.playFeedback(.impactMedium)","                }","            }","            ","        case .ended:","            \/\/ Simulate mechanical release","            HapticEngine.shared.playFeedback(.impactLight)","        }","    }","}"]},{"type":"heading","text":"Look and Feel Combinations","level":2,"anchor":"Look-and-Feel-Combinations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Combining looks and feels creates complete design systems:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Professional studio aesthetic","let studioDesign = LookAndFeel(","    look: NeumorphicLook(),","    feel: PreciseFeel()",")","","\/\/ Consumer-friendly interface","let consumerDesign = LookAndFeel(","    look: MinimalLook(),","    feel: SmoothFeel()",")","","\/\/ Vintage hardware emulation","let vintageDesign = LookAndFeel(","    look: VintageLook(),","    feel: VintageAnalogFeel()",")","","\/\/ Apply to components","InsetNeumorphicKnob(value: $frequency)","    .lookAndFeel(studioDesign)","","CircularButton(action: play)","    .lookAndFeel(consumerDesign)","","VintageKnob(value: $resonance)","    .lookAndFeel(vintageDesign)"]},{"type":"heading","text":"Advanced Features","level":2,"anchor":"Advanced-Features"},{"type":"heading","text":"Dynamic Look Switching","level":3,"anchor":"Dynamic-Look-Switching"},{"type":"codeListing","syntax":"swift","code":["struct AdaptiveLookView: View {","    @Environment(\\.colorScheme) var colorScheme","    @State private var selectedLook: Look = MinimalLook()","    ","    var body: some View {","        VStack {","            Picker(\"Visual Style\", selection: $selectedLook) {","                Text(\"Minimal\").tag(MinimalLook() as Look)","                Text(\"Neumorphic\").tag(NeumorphicLook() as Look)","                Text(\"Vintage\").tag(VintageLook() as Look)","            }","            ","            \/\/ Components adapt automatically","            HStack {","                InsetNeumorphicKnob(value: $gain)","                CircularButton(action: mute)","                VerticalInsetSlider(value: $volume)","            }","            .look(selectedLook)","        }","    }","}"]},{"type":"heading","text":"Context-Aware Rendering","level":3,"anchor":"Context-Aware-Rendering"},{"type":"codeListing","syntax":"swift","code":["extension Look {","    func contextualRender<Component: AudioUIComponent>(","        _ component: Component,","        in context: RenderContext","    ) -> some View {","        let adaptedContext = RenderContext(","            size: context.size,","            backgroundColor: backgroundColor(for: context.environment),","            foregroundColor: foregroundColor(for: context.environment),","            cornerRadius: cornerRadius(for: context.componentType),","            borderColor: borderColor(for: context.state)","        )","        ","        return render(component, in: adaptedContext)","    }","    ","    private func backgroundColor(for environment: EnvironmentContext) -> Color {","        switch environment.usage {","        case .studio:","            return Color.gray.opacity(0.9)","        case .live:","            return Color.black.opacity(0.95)","        case .consumer:","            return Color.white","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The Looks and Feels system provides the visual and interactive foundation that makes AudioUI components feel consistent and professional across different design aesthetics while maintaining the flexibility to match any applicationâ€™s brand or user preferences.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/CustomThemes","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/BuiltInThemes"],"title":"Theming & Customization","generated":true,"anchor":"Theming--Customization"}],"variants":[{"paths":["\/documentation\/audioui\/looksandfeels"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","metadata":{"role":"collectionGroup","title":"Looks and Feels","roleHeading":"API Collection","modules":[{"name":"AudioUI"}]},"identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/LooksAndFeels","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI/Feel":{"title":"Feel","role":"symbol","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Feel","type":"topic","url":"\/documentation\/audioui\/feel","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Feel"}],"navigatorTitle":[{"kind":"identifier","text":"Feel"}],"abstract":[]},"doc://audiouiswift.AudioUI/documentation/AudioUI/Look":{"kind":"symbol","title":"Look","abstract":[],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Look","kind":"identifier"}],"navigatorTitle":[{"text":"Look","kind":"identifier"}],"url":"\/documentation\/audioui\/look","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Look","type":"topic"},"doc://audiouiswift.AudioUI/documentation/AudioUI/BuiltInThemes":{"title":"Built-in Themes","url":"\/documentation\/audioui\/builtinthemes","kind":"article","abstract":[{"type":"text","text":"Explore AudioUIâ€™s collection of professionally designed themes that provide instant visual coherence for different audio application types and user preferences."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/BuiltInThemes","type":"topic","role":"collectionGroup"},"doc://audiouiswift.AudioUI/documentation/AudioUI/CustomThemes":{"title":"Custom Themes","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/CustomThemes","role":"collectionGroup","kind":"article","url":"\/documentation\/audioui\/customthemes","type":"topic","abstract":[{"type":"text","text":"Create and implement custom visual themes that define the complete appearance and behavior of AudioUI components across your application."}]},"doc://audiouiswift.AudioUI/documentation/AudioUI/ThemingGuide":{"title":"Theming Guide","role":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","kind":"article","abstract":[{"text":"Master AudioUIâ€™s powerful theming system to create stunning, branded audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/themingguide","type":"topic"},"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"}}}