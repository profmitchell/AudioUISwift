{"sections":[],"identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/GettingStarted","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Build your first professional audio interface in 15 minutes."}],"metadata":{"title":"Getting Started with AudioUI","modules":[{"name":"AudioUI"}],"role":"article","roleHeading":"Article"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/audioui\/gettingstarted"]}],"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"kind":"article","seeAlsoSections":[{"generated":true,"title":"Getting Started","identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/FirstAudioInterface","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPhilosophies","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPrinciples"],"anchor":"Getting-Started"}],"primaryContentSections":[{"content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"This comprehensive guide walks you through creating a complete synthesizer interface using AudioUI. You’ll learn core concepts, component usage, and theming while building a functional audio control surface.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By the end of this tutorial, you’ll have:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A complete synthesizer interface with frequency, volume, filter, and XY controls","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Deep understanding of AudioUI’s architecture and design philosophies","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Knowledge of theming, customization, and performance best practices"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A solid foundation for building any type of audio interface"}]}]}]},{"anchor":"What-Youll-Build","type":"heading","text":"What You’ll Build","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A professional synthesizer interface featuring:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Frequency knob","type":"text"}]},{"type":"text","text":" with hardware-inspired neumorphic design"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Volume fader","type":"text"}],"type":"strong"},{"text":" with smooth gesture interaction","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Filter controls","type":"text"}]},{"type":"text","text":" using minimal design philosophy"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"XY pad"}],"type":"strong"},{"type":"text","text":" for expressive parameter control"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Transport controls","type":"text"}]},{"text":" with play\/stop functionality","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Visual feedback","type":"text"}]},{"text":" and real-time parameter display","type":"text"}]}]}]},{"anchor":"Prerequisites","type":"heading","text":"Prerequisites","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Xcode 15.0+"}]},{"type":"text","text":" with iOS 15.0+ deployment target (iOS 18.0+ recommended)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Basic SwiftUI knowledge"}]},{"type":"text","text":" - Views, state management, bindings"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"AudioUI framework"}]},{"type":"text","text":" added to your project"}],"type":"paragraph"}]}]},{"anchor":"Installation","type":"heading","text":"Installation","level":2},{"type":"paragraph","inlineContent":[{"text":"Add AudioUI to your project using Swift Package Manager:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ In Package.swift","dependencies: [","    .package(url: \"https:\/\/github.com\/your-org\/AudioUI\", from: \"1.0.0\")","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or through Xcode: File → Add Package Dependencies → Enter AudioUI URL"}]},{"anchor":"Step-1-Project-Setup--Imports","type":"heading","text":"Step 1: Project Setup & Imports","level":2},{"type":"paragraph","inlineContent":[{"text":"Create a new SwiftUI view and import the AudioUI modules:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["import SwiftUI","import AudioUI","import AudioUICore","import AudioUITheme","import AudioUIComponents","","struct MySynthInterface: View {","    var body: some View {","        Text(\"Hello, AudioUI!\")","            .theme(.audioUINeumorphic) \/\/ Apply default theme","    }","}"]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Important"}],"type":"strong"},{"text":": Always apply a theme to your root view. AudioUI components rely on theme data for colors, spacing, and visual effects.","type":"text"}]}],"type":"aside","name":"Note","style":"note"},{"anchor":"Step-2-Audio-State-Management","type":"heading","text":"Step 2: Audio State Management","level":2},{"type":"paragraph","inlineContent":[{"text":"Define state variables for your synthesizer parameters:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["struct MySynthInterface: View {","    \/\/ Core audio parameters (normalized 0.0 - 1.0)","    @State private var frequency: Double = 0.5      \/\/ 50% of frequency range","    @State private var amplitude: Double = 0.7      \/\/ 70% volume","    @State private var filterCutoff: Double = 0.8   \/\/ 80% filter cutoff","    @State private var resonance: Double = 0.3      \/\/ 30% resonance","    ","    \/\/ XY pad for complex control","    @State private var xyPosition = CGPoint(x: 0.5, y: 0.5)","    ","    \/\/ Transport and UI state","    @State private var isPlaying: Bool = false","    @State private var selectedPreset: Int = 0","    ","    var body: some View {","        \/\/ We'll build this step by step","    }","}"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Best Practice"}]},{"type":"text","text":": Store audio parameters as normalized values (0.0-1.0) and scale them to actual ranges when needed. This makes parameter mapping and automation much easier."}]}],"type":"aside","name":"Note","style":"note"},{"anchor":"Step-3-Your-First-Component-Frequency-Knob","type":"heading","text":"Step 3: Your First Component - Frequency Knob","level":2},{"type":"paragraph","inlineContent":[{"text":"Add a professional neumorphic knob for frequency control:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var body: some View {","    VStack(spacing: 40) {","        \/\/ Header","        Text(\"AudioUI Synthesizer\")","            .font(.largeTitle)","            .fontWeight(.bold)","            .audioUIAccent()","        ","        \/\/ Frequency control with real-time display","        VStack(spacing: 20) {","            Text(\"FREQUENCY\")","                .audioUILabel(.section)","            ","            InsetNeumorphicKnob(","                value: $frequency,","                onValueChange: { newValue in","                    \/\/ Real-time parameter updates","                    let hz = 80 + (newValue * 1920) \/\/ 80Hz to 2000Hz range","                    print(\"Frequency: \\(Int(hz))Hz\")","                }","            )","            .frame(width: 120, height: 120)","            ","            \/\/ Real-time value display","            Text(\"\\(Int(80 + frequency * 1920))Hz\")","                .audioUILabel(.value)","                .fontDesign(.monospaced)","        }","    }","    .padding(40)","    .theme(.audioUINeumorphic)","}"]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Component Tip","type":"text"}]},{"type":"text","text":": The "},{"type":"codeVoice","code":"InsetNeumorphicKnob"},{"type":"text","text":" provides hardware-inspired tactile feedback with smooth rotation, velocity sensitivity, and realistic depth effects."}]}],"type":"aside","name":"Note","style":"note"},{"anchor":"Step-4-Add-Volume-Control-with-a-Fader","type":"heading","text":"Step 4: Add Volume Control with a Fader","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a vertical fader for volume control:"}]},{"syntax":"swift","type":"codeListing","code":["var body: some View {","    VStack(spacing: 40) {","        Text(\"My First Synthesizer\")","            .font(.largeTitle)","            .fontWeight(.bold)","        ","        HStack(spacing: 60) {","            \/\/ Frequency control","            VStack {","                Text(\"Frequency: \\(Int(frequency))Hz\")","                    .font(.headline)","                ","                InsetRotaryKnob(value: Binding(","                    get: { frequency \/ 2000 },","                    set: { frequency = $0 * 2000 }","                ))","                .frame(width: 120, height: 120)","            }","            ","            \/\/ Volume control","            VStack {","                Text(\"Volume: \\(Int(amplitude * 100))%\")","                    .font(.headline)","                ","                VerticalInsetSlider(value: $amplitude)","                    .frame(width: 60, height: 200)","            }","        }","    }","    .padding()","}"]},{"content":[{"inlineContent":[{"text":"Faders are ideal for parameters like volume where the visual metaphor of “level” is important.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"anchor":"Step-5-Add-Two-Dimensional-Control-with-an-XY-Pad","type":"heading","text":"Step 5: Add Two-Dimensional Control with an XY Pad","level":2},{"type":"paragraph","inlineContent":[{"text":"XY pads are perfect for controlling two related parameters simultaneously:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["var body: some View {","    VStack(spacing: 40) {","        Text(\"My First Synthesizer\")","            .font(.largeTitle)","            .fontWeight(.bold)","        ","        HStack(spacing: 60) {","            \/\/ Frequency control","            VStack {","                Text(\"Frequency: \\(Int(frequency))Hz\")","                    .font(.headline)","                ","                InsetRotaryKnob(value: Binding(","                    get: { frequency \/ 2000 },","                    set: { frequency = $0 * 2000 }","                ))","                .frame(width: 120, height: 120)","            }","            ","            \/\/ Volume control","            VStack {","                Text(\"Volume: \\(Int(amplitude * 100))%\")","                    .font(.headline)","                ","                VerticalInsetSlider(value: $amplitude)","                    .frame(width: 60, height: 200)","            }","            ","            \/\/ Filter control using XY pad","            VStack {","                Text(\"Filter\")","                    .font(.headline)","                ","                NeumorphicXYPad(value: Binding(","                    get: { CGPoint(x: filterCutoff, y: 0.5) },","                    set: { filterCutoff = $0.x }","                ))","                .frame(width: 150, height: 150)","            }","        }","    }","    .padding()","}"]},{"content":[{"inlineContent":[{"type":"text","text":"XY pads are commonly used for filter cutoff\/resonance, delay feedback\/time, or reverb size\/damping."}],"type":"paragraph"}],"type":"aside","name":"Advanced","style":"note"},{"anchor":"Step-6-Add-Transport-Control","type":"heading","text":"Step 6: Add Transport Control","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a play\/stop button to complete the interface:"}]},{"syntax":"swift","type":"codeListing","code":["var body: some View {","    VStack(spacing: 40) {","        Text(\"My First Synthesizer\")","            .font(.largeTitle)","            .fontWeight(.bold)","        ","        HStack(spacing: 60) {","            \/\/ ... existing controls ...","        }","        ","        \/\/ Transport control","        InsetToggleButton(","            label: isPlaying ? \"STOP\" : \"PLAY\", ","            isOn: $isPlaying","        )","        .onChange(of: isPlaying) { playing in","            if playing {","                startSynthesis()","            } else {","                stopSynthesis()","            }","        }","    }","    .padding()","}","","\/\/ Audio engine integration (conceptual)","func startSynthesis() {","    print(\"Starting synthesis at \\(frequency)Hz, volume \\(amplitude)\")","    \/\/ Connect to your audio engine here","}","","func stopSynthesis() {","    print(\"Stopping synthesis\")","    \/\/ Stop your audio engine here","}"]},{"anchor":"Step-7-Apply-Professional-Theming","type":"heading","text":"Step 7: Apply Professional Theming","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Transform your interface with AudioUI’s theming system:"}]},{"syntax":"swift","type":"codeListing","code":["var body: some View {","    VStack(spacing: 40) {","        \/\/ ... your interface ...","    }","    .padding()","    .theme(.audioUINeumorphic) \/\/ Apply neumorphic theme","    .preferredColorScheme(.dark) \/\/ Professional dark appearance","}"]},{"anchor":"Try-Different-Themes","type":"heading","text":"Try Different Themes","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Experiment with different visual styles:"}]},{"syntax":"swift","type":"codeListing","code":[".theme(.audioUIMinimal)     \/\/ Clean, professional",".theme(.darkPro)           \/\/ Studio standard",".theme(.sunset)            \/\/ Creative warmth",".theme(.ocean)             \/\/ Calm focus"]},{"anchor":"Step-8-Understanding-Component-Selection","type":"heading","text":"Step 8: Understanding Component Selection","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"AudioUI provides multiple components for each control type. Here’s when to use each:"}]},{"anchor":"Knob-Choices","type":"heading","text":"Knob Choices","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"InsetRotaryKnob"},{"type":"text","text":": Hardware-inspired with grip ridges (frequency, gain)"}]}]},{"content":[{"inlineContent":[{"code":"KnobMinimal1","type":"codeVoice"},{"text":": Clean fill style (volume, levels)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"KnobMinimal2"},{"type":"text","text":": Stepped style (discrete parameters)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"InsetNeumorphicKnob"},{"type":"text","text":": Premium tactile feel (creative apps)"}]}]}]},{"anchor":"Fader-Choices","type":"heading","text":"Fader Choices","level":3},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"VerticalInsetSlider","type":"codeVoice"},{"text":": Professional mixing console style","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"InsetHorizontalFader"},{"type":"text","text":": Compact horizontal layout"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SliderMinimal1"},{"type":"text","text":": Ultra-clean minimal style"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"VerticalNeumorphicFader"},{"text":": Soft, tactile feel","type":"text"}]}]}]},{"anchor":"Button-Choices","type":"heading","text":"Button Choices","level":3},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"InsetToggleButton"},{"text":": Professional transport controls","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"InsetCircularButton"},{"type":"text","text":": Icon-based actions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"MinimalButton1","type":"codeVoice"},{"text":": Clean, functional style","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"NeumorphicButton1"},{"type":"text","text":": Tactile, premium feel"}],"type":"paragraph"}]}]},{"anchor":"Complete-Example","type":"heading","text":"Complete Example","level":2},{"type":"paragraph","inlineContent":[{"text":"Here’s your finished synthesizer interface:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["import SwiftUI","import AudioUI","","struct MySynthInterface: View {","    @State private var frequency: Double = 440.0","    @State private var amplitude: Double = 0.5","    @State private var filterCutoff: Double = 0.7","    @State private var isPlaying: Bool = false","    ","    var body: some View {","        VStack(spacing: 40) {","            Text(\"My First Synthesizer\")","                .font(.largeTitle)","                .fontWeight(.bold)","            ","            HStack(spacing: 60) {","                \/\/ Frequency control","                VStack {","                    Text(\"Frequency: \\(Int(frequency))Hz\")","                        .font(.headline)","                    ","                    InsetRotaryKnob(value: Binding(","                        get: { frequency \/ 2000 },","                        set: { frequency = $0 * 2000 }","                    ))","                    .frame(width: 120, height: 120)","                }","                ","                \/\/ Volume control","                VStack {","                    Text(\"Volume: \\(Int(amplitude * 100))%\")","                        .font(.headline)","                    ","                    VerticalInsetSlider(value: $amplitude)","                        .frame(width: 60, height: 200)","                }","                ","                \/\/ Filter control","                VStack {","                    Text(\"Filter\")","                        .font(.headline)","                    ","                    NeumorphicXYPad(value: Binding(","                        get: { CGPoint(x: filterCutoff, y: 0.5) },","                        set: { filterCutoff = $0.x }","                    ))","                    .frame(width: 150, height: 150)","                }","            }","            ","            \/\/ Transport control","            InsetToggleButton(","                label: isPlaying ? \"STOP\" : \"PLAY\", ","                isOn: $isPlaying","            )","        }","        .padding()","        .theme(.audioUINeumorphic)","        .preferredColorScheme(.dark)","    }","}"]},{"anchor":"Next-Steps","type":"heading","text":"Next Steps","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you understand the basics:"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Explore More Components"}],"type":"strong"},{"type":"text","text":": Try drum pads, gyroscope controls, and level meters"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Learn About Theming","type":"text"}]},{"type":"text","text":": "},{"type":"reference","isActive":true,"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide"},{"type":"text","text":" - Create custom themes"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Build a Drum Machine","type":"text"}]},{"type":"text","text":": "},{"type":"reference","isActive":true,"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumMachineTutorial"},{"type":"text","text":" - Learn about rhythm interfaces"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Optimize Performance","type":"text"}]},{"type":"text","text":": "},{"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/PerformanceOptimization","isActive":true,"type":"reference"},{"type":"text","text":" - Best practices for real-time audio"}],"type":"paragraph"}]}]},{"anchor":"Key-Takeaways","type":"heading","text":"Key Takeaways","level":2},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"AudioUI provides professional-grade components","type":"text"}]},{"type":"text","text":" out of the box"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Theming separates visual style from functionality"}]},{"type":"text","text":" - switch themes without changing code"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Components are designed for audio precision","type":"text"}],"type":"strong"},{"text":" with appropriate ranges and gestures","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Multiple visual approaches","type":"text"}],"type":"strong"},{"text":" let you match your app’s personality (minimal vs neumorphic)","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You’ve built a complete synthesizer interface in just a few steps. AudioUI’s thoughtful design makes complex audio interfaces approachable while maintaining the precision and performance that audio applications demand."}]}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DrumMachineTutorial":{"type":"topic","abstract":[{"text":"Build a complete, professional drum machine with velocity-sensitive pads and advanced pattern sequencing.","type":"text"}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumMachineTutorial","role":"article","title":"Drum Machine Tutorial","url":"\/documentation\/audioui\/drummachinetutorial","kind":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/PerformanceOptimization":{"role":"collectionGroup","kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/PerformanceOptimization","title":"Performance Optimization","type":"topic","url":"\/documentation\/audioui\/performanceoptimization","abstract":[{"text":"Advanced techniques and best practices for building high-performance audio interfaces with AudioUI that maintain smooth 60fps rendering and minimal CPU usage.","type":"text"}]},"doc://audiouiswift.AudioUI/documentation/AudioUI/ThemingGuide":{"title":"Theming Guide","role":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","kind":"article","abstract":[{"text":"Master AudioUI’s powerful theming system to create stunning, branded audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/themingguide","type":"topic"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DesignPhilosophies":{"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPhilosophies","role":"article","type":"topic","title":"Design Philosophies in AudioUI","abstract":[{"text":"Understanding AudioUI’s two distinct design philosophies will help you choose the right visual approach for your audio applications.","type":"text"}],"url":"\/documentation\/audioui\/designphilosophies"},"doc://audiouiswift.AudioUI/documentation/AudioUI/FirstAudioInterface":{"title":"Building Your First Audio Interface","kind":"article","role":"article","type":"topic","abstract":[{"type":"text","text":"Learn to create professional audio interfaces by building a complete synthesizer control panel from scratch."}],"url":"\/documentation\/audioui\/firstaudiointerface","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/FirstAudioInterface"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DesignPrinciples":{"role":"article","abstract":[{"type":"text","text":"Learn the fundamental principles behind effective audio interface design and how AudioUI embodies them."}],"kind":"article","type":"topic","title":"Understanding Audio UI Design Principles","url":"\/documentation\/audioui\/designprinciples","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPrinciples"}}}