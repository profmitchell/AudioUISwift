{"identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/FirstAudioInterface","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn to create professional audio interfaces by building a complete synthesizer control panel from scratch."}],"seeAlsoSections":[{"title":"Getting Started","generated":true,"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/GettingStarted","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPhilosophies","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPrinciples"],"anchor":"Getting-Started"}],"metadata":{"roleHeading":"Article","modules":[{"name":"AudioUI"}],"role":"article","title":"Building Your First Audio Interface"},"variants":[{"paths":["\/documentation\/audioui\/firstaudiointerface"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial walks you through creating your first audio interface with AudioUI. You‚Äôll learn the fundamentals of audio control design, theming, and real-time parameter management while building a functional synthesizer interface."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By the end of this tutorial, you‚Äôll understand:"}]},{"items":[{"content":[{"inlineContent":[{"text":"How to choose the right controls for different audio parameters","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The difference between minimal and neumorphic design philosophies"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"How to connect interface controls to audio parameters"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Best practices for audio interface layout and organization","type":"text"}]}]}],"type":"unorderedList"},{"anchor":"What-Youll-Build","level":2,"type":"heading","text":"What You‚Äôll Build"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A complete synthesizer interface featuring:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Frequency control with a precision knob"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Volume control with a vertical fader","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Filter controls using XY pad interaction"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Play\/stop functionality with toggle buttons","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Professional theming and visual feedback"}]}]}],"type":"unorderedList"},{"anchor":"Prerequisites","level":2,"type":"heading","text":"Prerequisites"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Basic SwiftUI knowledge","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Understanding of audio parameters (frequency, amplitude, filtering)"}]}]},{"content":[{"inlineContent":[{"text":"Xcode 15.0+ with iOS 17.0+ or macOS 14.0+ target","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Step-1-Set-Up-Your-Audio-Parameters","level":2,"type":"heading","text":"Step 1: Set Up Your Audio Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Start by defining the audio parameters your interface will control:"}]},{"syntax":"swift","code":["import SwiftUI","import AudioUI","","struct MySynthInterface: View {","    \/\/ Core audio parameters","    @State private var frequency: Double = 440.0      \/\/ A4 note (440Hz)","    @State private var amplitude: Double = 0.5        \/\/ 50% volume","    @State private var filterCutoff: Double = 0.7     \/\/ 70% cutoff frequency","    @State private var filterResonance: Double = 0.3  \/\/ 30% resonance","    @State private var isPlaying: Bool = false        \/\/ Playback state","    ","    var body: some View {","        \/\/ Interface coming next...","    }","}"],"type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"inlineContent":[{"text":"Learning Point","type":"text"}],"type":"strong"},{"type":"text","text":": Notice how audio parameters use normalized values (0.0-1.0) in the interface, then get scaled to appropriate ranges (like 20Hz-20kHz for frequency) when connecting to audio engines."}],"type":"paragraph"}],"style":"note","type":"aside"},{"level":2,"anchor":"Step-2-Add-Frequency-Control","text":"Step 2: Add Frequency Control","type":"heading"},{"inlineContent":[{"type":"text","text":"Use a knob for frequency control - perfect for continuous parameters without clear min\/max boundaries:"}],"type":"paragraph"},{"syntax":"swift","code":["var body: some View {","    VStack(spacing: 40) {","        Text(\"My First Synthesizer\")","            .font(.largeTitle)","            .fontWeight(.bold)","        ","        \/\/ Frequency control section","        VStack(spacing: 12) {","            Text(\"Frequency\")","                .font(.headline)","            ","            Text(\"\\(Int(frequency))Hz\")","                .font(.title2)","                .foregroundColor(.blue)","            ","            \/\/ Use a minimal knob for precise frequency control","            KnobMinimal1(value: Binding(","                get: { frequency \/ 2000 }, \/\/ Normalize to 0-1 for UI","                set: { frequency = $0 * 2000 } \/\/ Scale to 0-2000Hz range","            ))","            .frame(width: 100, height: 100)","        }","    }","    .padding()","}"],"type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Learning Point"}]},{"type":"text","text":": Audio interfaces often need to transform between UI ranges (0-1) and audio ranges (20Hz-20kHz). This separation keeps the UI controls consistent while allowing flexible audio parameter scaling."}],"type":"paragraph"}],"style":"note","type":"aside"},{"level":2,"anchor":"Step-3-Add-Volume-Control","text":"Step 3: Add Volume Control","type":"heading"},{"inlineContent":[{"text":"Use a vertical fader for volume - this follows mixing console conventions:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add this after the frequency control","VStack(spacing: 12) {","    Text(\"Volume\")","        .font(.headline)","    ","    Text(\"\\(Int(amplitude * 100))%\")","        .font(.title2)","        .foregroundColor(.green)","    ","    \/\/ Vertical fader mimics mixing console faders","    VerticalInsetSlider(value: $amplitude)","        .frame(width: 60, height: 150)","}"],"type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Learning Point"}]},{"type":"text","text":": Volume controls almost always use vertical faders because this matches the mental model from physical mixing consoles. The vertical motion feels natural for ‚Äúturning up‚Äù or ‚Äúturning down‚Äù volume."}],"type":"paragraph"}],"style":"note","type":"aside"},{"level":2,"anchor":"Step-4-Add-Filter-Controls","text":"Step 4: Add Filter Controls","type":"heading"},{"inlineContent":[{"text":"Use an XY pad for two-dimensional filter control:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add this after the volume control","VStack(spacing: 12) {","    Text(\"Filter\")","        .font(.headline)","    ","    HStack {","        Text(\"Cutoff: \\(Int(filterCutoff * 100))%\")","        Spacer()","        Text(\"Resonance: \\(Int(filterResonance * 100))%\")","    }","    .font(.caption)","    ","    \/\/ XY pad for two-dimensional filter control","    NeumorphicXYPad(value: Binding(","        get: { CGPoint(x: filterCutoff, y: filterResonance) },","        set: { ","            filterCutoff = $0.x","            filterResonance = $0.y","        }","    ))","    .frame(width: 180, height: 180)","}"],"type":"codeListing"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Learning Point","type":"text"}]},{"text":": XY pads excel at controlling two related parameters simultaneously. Filter cutoff and resonance work well together - users can ‚Äúsweep‚Äù the filter while adjusting resonance for different timbral effects.","type":"text"}]}],"style":"note","type":"aside"},{"level":2,"anchor":"Step-5-Add-PlayStop-Control","text":"Step 5: Add Play\/Stop Control","type":"heading"},{"inlineContent":[{"text":"Use a toggle button for play state management:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add this at the bottom of your VStack","InsetToggleButton(","    label: isPlaying ? \"STOP\" : \"PLAY\", ","    isOn: $isPlaying",")",".onChange(of: isPlaying) { playing in","    if playing {","        startSynthesis()","    } else {","        stopSynthesis()","    }","}"],"type":"codeListing"},{"level":2,"anchor":"Step-6-Connect-to-Audio-Engine","text":"Step 6: Connect to Audio Engine","type":"heading"},{"inlineContent":[{"text":"Add the audio connection functions:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Add these functions to your view","private func startSynthesis() {","    \/\/ Connect to your audio engine here","    print(\"üéµ Starting synthesis:\")","    print(\"  Frequency: \\(frequency)Hz\")","    print(\"  Amplitude: \\(amplitude)\")","    print(\"  Filter: cutoff=\\(filterCutoff), resonance=\\(filterResonance)\")","    ","    \/\/ In a real app, you'd configure your audio engine:","    \/\/ audioEngine.oscillator.frequency = frequency","    \/\/ audioEngine.oscillator.amplitude = amplitude","    \/\/ audioEngine.filter.cutoff = filterCutoff * 20000 \/\/ Scale to 0-20kHz","    \/\/ audioEngine.filter.resonance = filterResonance * 10 \/\/ Scale to 0-10","    \/\/ audioEngine.start()","}","","private func stopSynthesis() {","    print(\"üõë Stopping synthesis\")","    ","    \/\/ In a real app:","    \/\/ audioEngine.stop()","}"],"type":"codeListing"},{"level":2,"anchor":"Step-7-Apply-Professional-Theming","text":"Step 7: Apply Professional Theming","type":"heading"},{"inlineContent":[{"type":"text","text":"Transform your interface with AudioUI‚Äôs theming system:"}],"type":"paragraph"},{"syntax":"swift","code":["var body: some View {","    VStack(spacing: 40) {","        \/\/ ... your interface controls ...","    }","    .padding()","    .theme(.audioUINeumorphic) \/\/ Apply neumorphic theme","    .preferredColorScheme(.dark) \/\/ Professional dark appearance","}"],"type":"codeListing"},{"level":2,"anchor":"Complete-Interface","text":"Complete Interface","type":"heading"},{"inlineContent":[{"type":"text","text":"Here‚Äôs your complete first audio interface:"}],"type":"paragraph"},{"syntax":"swift","code":["import SwiftUI","import AudioUI","","struct MySynthInterface: View {","    @State private var frequency: Double = 440.0","    @State private var amplitude: Double = 0.5","    @State private var filterCutoff: Double = 0.7","    @State private var filterResonance: Double = 0.3","    @State private var isPlaying: Bool = false","    ","    var body: some View {","        VStack(spacing: 40) {","            Text(\"My First Synthesizer\")","                .font(.largeTitle)","                .fontWeight(.bold)","            ","            HStack(spacing: 40) {","                \/\/ Frequency Control","                VStack(spacing: 12) {","                    Text(\"Frequency\")","                        .font(.headline)","                    Text(\"\\(Int(frequency))Hz\")","                        .font(.title2)","                        .foregroundColor(.blue)","                    KnobMinimal1(value: Binding(","                        get: { frequency \/ 2000 },","                        set: { frequency = $0 * 2000 }","                    ))","                    .frame(width: 100, height: 100)","                }","                ","                \/\/ Volume Control","                VStack(spacing: 12) {","                    Text(\"Volume\")","                        .font(.headline)","                    Text(\"\\(Int(amplitude * 100))%\")","                        .font(.title2)","                        .foregroundColor(.green)","                    VerticalInsetSlider(value: $amplitude)","                        .frame(width: 60, height: 150)","                }","                ","                \/\/ Filter Control","                VStack(spacing: 12) {","                    Text(\"Filter\")","                        .font(.headline)","                    HStack {","                        Text(\"C: \\(Int(filterCutoff * 100))%\")","                        Spacer()","                        Text(\"R: \\(Int(filterResonance * 100))%\")","                    }","                    .font(.caption)","                    NeumorphicXYPad(value: Binding(","                        get: { CGPoint(x: filterCutoff, y: filterResonance) },","                        set: { ","                            filterCutoff = $0.x","                            filterResonance = $0.y","                        }","                    ))","                    .frame(width: 150, height: 150)","                }","            }","            ","            \/\/ Play\/Stop Control","            InsetToggleButton(","                label: isPlaying ? \"STOP\" : \"PLAY\", ","                isOn: $isPlaying","            )","            .onChange(of: isPlaying) { playing in","                if playing {","                    startSynthesis()","                } else {","                    stopSynthesis()","                }","            }","        }","        .padding()","        .theme(.audioUINeumorphic)","        .preferredColorScheme(.dark)","    }","    ","    private func startSynthesis() {","        print(\"üéµ Starting synthesis at \\(frequency)Hz, volume \\(amplitude)\")","    }","    ","    private func stopSynthesis() {","        print(\"üõë Stopping synthesis\")","    }","}"],"type":"codeListing"},{"level":2,"anchor":"What-Youve-Learned","text":"What You‚Äôve Learned","type":"heading"},{"inlineContent":[{"text":"Congratulations! You‚Äôve built a complete audio interface and learned:","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Audio-UI-Fundamentals","text":"Audio UI Fundamentals","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Knobs for continuous parameters"}]},{"type":"text","text":": Frequency, gain, and other endless controls"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Faders for level controls","type":"text"}],"type":"strong"},{"text":": Volume, channel levels, and mixing parameters","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"XY pads for dual parameters"}]},{"type":"text","text":": Filter controls, spatial effects, and complex parameter pairs"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Toggle buttons for state"}]},{"type":"text","text":": Play\/stop, mute\/unmute, and bypass controls"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":3,"anchor":"Design-Principles","text":"Design Principles","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Hardware metaphors"}]},{"type":"text","text":": Vertical faders match physical mixing consoles"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Parameter mapping","type":"text"}],"type":"strong"},{"type":"text","text":": Transform between UI ranges (0-1) and audio ranges (20Hz-20kHz)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Visual feedback","type":"text"}],"type":"strong"},{"text":": Real-time parameter display enhances user understanding","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Professional theming","type":"text"}],"type":"strong"},{"text":": Dark themes reduce eye strain in studio environments","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"AudioUI-Architecture","text":"AudioUI Architecture","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Separation of concerns","type":"text"}]},{"text":": UI controls handle interaction, audio engines handle sound","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Flexible theming"}]},{"type":"text","text":": Switch between minimal and neumorphic styles"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Cross-platform design","type":"text"}],"type":"strong"},{"type":"text","text":": Same code works on iOS, macOS, and other Apple platforms"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"anchor":"Next-Steps","text":"Next Steps","type":"heading"},{"inlineContent":[{"type":"text","text":"Now that you understand the basics:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Explore More Components"}]},{"type":"text","text":": Try drum pads, gyroscope controls, and level meters"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Learn About Theming"}],"type":"strong"},{"text":": ","type":"text"},{"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","type":"reference","isActive":true},{"text":" - Create custom themes","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Build a Drum Machine","type":"text"}],"type":"strong"},{"text":": ","type":"text"},{"isActive":true,"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumMachineTutorial","type":"reference"},{"text":" - Learn about rhythm interfaces","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Optimize Performance"}]},{"text":": ","type":"text"},{"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/PerformanceOptimization","isActive":true,"type":"reference"},{"text":" - Best practices for real-time audio","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"level":2,"anchor":"Key-Takeaways","text":"Key Takeaways","type":"heading"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"AudioUI provides professional-grade components"}],"type":"strong"},{"text":" out of the box","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Theming separates visual style from functionality"}],"type":"strong"},{"text":" - switch themes without changing code","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Components are designed for audio precision"}]},{"type":"text","text":" with appropriate ranges and gestures"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Multiple visual approaches","type":"text"}]},{"type":"text","text":" let you match your app‚Äôs personality (minimal vs neumorphic)"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"You‚Äôve built a complete synthesizer interface in just a few steps. AudioUI‚Äôs thoughtful design makes complex audio interfaces approachable while maintaining the precision and performance that audio applications demand.","type":"text"}],"type":"paragraph"}]}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI/DrumMachineTutorial":{"type":"topic","abstract":[{"text":"Build a complete, professional drum machine with velocity-sensitive pads and advanced pattern sequencing.","type":"text"}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumMachineTutorial","role":"article","title":"Drum Machine Tutorial","url":"\/documentation\/audioui\/drummachinetutorial","kind":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/ThemingGuide":{"title":"Theming Guide","role":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","kind":"article","abstract":[{"text":"Master AudioUI‚Äôs powerful theming system to create stunning, branded audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/themingguide","type":"topic"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DesignPrinciples":{"role":"article","abstract":[{"type":"text","text":"Learn the fundamental principles behind effective audio interface design and how AudioUI embodies them."}],"kind":"article","type":"topic","title":"Understanding Audio UI Design Principles","url":"\/documentation\/audioui\/designprinciples","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPrinciples"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DesignPhilosophies":{"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DesignPhilosophies","role":"article","type":"topic","title":"Design Philosophies in AudioUI","abstract":[{"text":"Understanding AudioUI‚Äôs two distinct design philosophies will help you choose the right visual approach for your audio applications.","type":"text"}],"url":"\/documentation\/audioui\/designphilosophies"},"doc://audiouiswift.AudioUI/documentation/AudioUI/PerformanceOptimization":{"role":"collectionGroup","kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/PerformanceOptimization","title":"Performance Optimization","type":"topic","url":"\/documentation\/audioui\/performanceoptimization","abstract":[{"text":"Advanced techniques and best practices for building high-performance audio interfaces with AudioUI that maintain smooth 60fps rendering and minimal CPU usage.","type":"text"}]},"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/GettingStarted":{"role":"article","abstract":[{"type":"text","text":"Build your first professional audio interface in 15 minutes."}],"type":"topic","title":"Getting Started with AudioUI","url":"\/documentation\/audioui\/gettingstarted","kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/GettingStarted"}}}