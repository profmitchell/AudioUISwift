{"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/audioui\/drummachinetutorial"]}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"This comprehensive tutorial guides you through creating a full-featured drum machine interface using AudioUI’s most advanced components. You’ll learn to combine velocity-sensitive drum pads, real-time pattern sequencing, professional mixing controls, and dynamic visual feedback into a cohesive, production-ready instrument."}],"type":"paragraph"},{"inlineContent":[{"text":"Perfect for understanding how AudioUI components work together to create complex, professional audio interfaces.","type":"text"}],"type":"paragraph"},{"level":2,"text":"What You’ll Build","type":"heading","anchor":"What-Youll-Build"},{"inlineContent":[{"type":"text","text":"A complete drum machine featuring:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"16 velocity-sensitive drum pads"}]},{"type":"text","text":" with authentic hardware feel and visual feedback"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"16-step pattern sequencer","type":"text"}]},{"type":"text","text":" with swing, shuffle, and per-step velocity control"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Individual channel mixing"}]},{"text":" with EQ, effects sends, and professional metering","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Master effects section"}],"type":"strong"},{"text":" with reverb, delay, and compression","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Pattern management"}],"type":"strong"},{"type":"text","text":" with save, load, copy, and chain functionality"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Transport controls","type":"text"}]},{"type":"text","text":" with tempo, swing, and real-time playback"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Visual feedback"}]},{"type":"text","text":" including level meters, step indicators, and pad animations"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Prerequisites","type":"heading","anchor":"Prerequisites"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"AudioUI framework","type":"text"}]},{"text":" installed and configured","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Intermediate SwiftUI knowledge"}],"type":"strong"},{"type":"text","text":" - complex state management, bindings, animations"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Basic audio concepts"}]},{"type":"text","text":" - understanding of drum machines, sequencing, and mixing"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"iOS 18.0+","type":"text"}]},{"type":"text","text":" for latest AudioUI features (iOS 15.0+ supported with reduced features)"}]}]}],"type":"unorderedList"},{"level":2,"text":"Project Architecture","type":"heading","anchor":"Project-Architecture"},{"inlineContent":[{"text":"This tutorial demonstrates advanced AudioUI patterns:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Component composition","type":"text"}],"type":"strong"},{"text":" - building complex interfaces from simple components","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"State management"}]},{"type":"text","text":" - handling real-time audio parameter updates"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Performance optimization","type":"text"}],"type":"strong"},{"text":" - maintaining 60fps with complex animations","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Professional design","type":"text"}],"type":"strong"},{"type":"text","text":" - matching industry-standard drum machine interfaces"}]}]}],"type":"unorderedList"},{"level":2,"text":"Step 1: Project Setup","type":"heading","anchor":"Step-1-Project-Setup"},{"inlineContent":[{"type":"text","text":"Create a new project and set up the basic structure:"}],"type":"paragraph"},{"code":["import SwiftUI","import AudioUI","import AudioUICore","import AudioUITheme","","struct DrumMachineApp: App {","    var body: some Scene {","        WindowGroup {","            DrumMachineView()","                .audioUITheme(.minimal)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Step 2: Drum Pad Grid","type":"heading","anchor":"Step-2-Drum-Pad-Grid"},{"inlineContent":[{"text":"Create the main drum pad interface with velocity sensitivity:","type":"text"}],"type":"paragraph"},{"code":["struct DrumPadGrid: View {","    @Binding var selectedPad: Int?","    @Binding var samples: [DrumSample]","    @State private var padVelocities: [Double] = Array(repeating: 0.0, count: 16)","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"DRUM PADS\")","                .audioUILabel(.section)","            ","            LazyVGrid(columns: Array(repeating: GridItem(.flexible(), spacing: 10), count: 4), spacing: 10) {","                ForEach(0..<16, id: \\.self) { index in","                    DrumPadCell(","                        index: index,","                        sample: samples[index],","                        isSelected: selectedPad == index,","                        velocity: $padVelocities[index]","                    ) {","                        selectedPad = index","                        triggerPad(index)","                    }","                }","            }","            .padding(20)","            .audioUIGroupBox()","        }","    }","    ","    private func triggerPad(_ index: Int) {","        \/\/ Trigger audio sample with velocity","        let velocity = padVelocities[index]","        print(\"Triggering pad \\(index) with velocity \\(velocity)\")","        ","        \/\/ Animate velocity feedback","        withAnimation(.easeOut(duration: 0.1)) {","            padVelocities[index] = 1.0","        }","        ","        withAnimation(.easeOut(duration: 0.5).delay(0.1)) {","            padVelocities[index] = 0.0","        }","    }","}","","struct DrumPadCell: View {","    let index: Int","    let sample: DrumSample","    let isSelected: Bool","    @Binding var velocity: Double","    let onTap: () -> Void","    ","    var body: some View {","        VelocityPad(","            velocity: $velocity,","            onTrigger: onTap","        )","        .frame(width: 80, height: 80)","        .overlay(","            VStack(spacing: 4) {","                Text(\"\\(index + 1)\")","                    .font(.caption)","                    .fontWeight(.bold)","                ","                Text(sample.name)","                    .font(.caption2)","                    .lineLimit(1)","            }","            .foregroundColor(isSelected ? .primary : .secondary)","        )","        .audioUIBorder(isSelected ? .accent : .primary, width: isSelected ? 3 : 1)","    }","}","","struct DrumSample {","    let name: String","    let fileName: String","    let color: Color","    ","    static let defaultSamples = [","        DrumSample(name: \"KICK\", fileName: \"kick.wav\", color: .red),","        DrumSample(name: \"SNARE\", fileName: \"snare.wav\", color: .orange),","        DrumSample(name: \"HAT\", fileName: \"hihat.wav\", color: .yellow),","        DrumSample(name: \"OPEN\", fileName: \"openhat.wav\", color: .green),","        DrumSample(name: \"CLAP\", fileName: \"clap.wav\", color: .blue),","        DrumSample(name: \"CRASH\", fileName: \"crash.wav\", color: .purple),","        DrumSample(name: \"RIDE\", fileName: \"ride.wav\", color: .pink),","        DrumSample(name: \"TOM1\", fileName: \"tom1.wav\", color: .cyan),","        DrumSample(name: \"TOM2\", fileName: \"tom2.wav\", color: .mint),","        DrumSample(name: \"TOM3\", fileName: \"tom3.wav\", color: .indigo),","        DrumSample(name: \"PERC1\", fileName: \"perc1.wav\", color: .teal),","        DrumSample(name: \"PERC2\", fileName: \"perc2.wav\", color: .brown),","        DrumSample(name: \"PERC3\", fileName: \"perc3.wav\", color: .gray),","        DrumSample(name: \"FX1\", fileName: \"fx1.wav\", color: .black),","        DrumSample(name: \"FX2\", fileName: \"fx2.wav\", color: .white),","        DrumSample(name: \"FX3\", fileName: \"fx3.wav\", color: .accentColor)","    ]","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Step 3: Pattern Sequencer","type":"heading","anchor":"Step-3-Pattern-Sequencer"},{"inlineContent":[{"text":"Build the 16-step sequencer with velocity control:","type":"text"}],"type":"paragraph"},{"code":["struct PatternSequencer: View {","    @Binding var pattern: DrumPattern","    @Binding var currentStep: Int","    @Binding var isPlaying: Bool","    @State private var selectedTrack: Int = 0","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"SEQUENCER\")","                .audioUILabel(.section)","            ","            \/\/ Track Selection","            HStack {","                Text(\"TRACK:\")","                    .audioUILabel(.parameter)","                ","                ScrollView(.horizontal, showsIndicators: false) {","                    HStack(spacing: 8) {","                        ForEach(0..<16, id: \\.self) { track in","                            RectangularButton(","                                title: \"\\(track + 1)\",","                                isPressed: .constant(selectedTrack == track)","                            ) {","                                selectedTrack = track","                            }","                            .frame(width: 30, height: 25)","                        }","                    }","                    .padding(.horizontal)","                }","            }","            ","            \/\/ Step Grid","            VStack(spacing: 8) {","                \/\/ Step numbers","                HStack(spacing: 4) {","                    ForEach(0..<16, id: \\.self) { step in","                        Text(\"\\(step + 1)\")","                            .font(.caption2)","                            .frame(width: 30)","                            .foregroundColor(currentStep == step && isPlaying ? .accent : .secondary)","                    }","                }","                ","                \/\/ Step buttons for selected track","                HStack(spacing: 4) {","                    ForEach(0..<16, id: \\.self) { step in","                        SequencerStep(","                            step: step,","                            track: selectedTrack,","                            pattern: $pattern,","                            currentStep: currentStep,","                            isPlaying: isPlaying","                        )","                    }","                }","                ","                \/\/ Velocity controls for active steps","                HStack(spacing: 4) {","                    ForEach(0..<16, id: \\.self) { step in","                        if pattern.tracks[selectedTrack].steps[step].isActive {","                            VStack {","                                VerticalInsetSlider(","                                    value: Binding(","                                        get: { pattern.tracks[selectedTrack].steps[step].velocity },","                                        set: { pattern.tracks[selectedTrack].steps[step].velocity = $0 }","                                    )","                                )","                                .frame(width: 20, height: 40)","                                ","                                Text(\"\\(Int(pattern.tracks[selectedTrack].steps[step].velocity * 127))\")","                                    .font(.caption2)","                            }","                            .frame(width: 30)","                        } else {","                            Spacer()","                                .frame(width: 30, height: 60)","                        }","                    }","                }","            }","        }","        .audioUIGroupBox()","    }","}","","struct SequencerStep: View {","    let step: Int","    let track: Int","    @Binding var pattern: DrumPattern","    let currentStep: Int","    let isPlaying: Bool","    ","    var isActive: Bool {","        pattern.tracks[track].steps[step].isActive","    }","    ","    var isCurrentStep: Bool {","        currentStep == step && isPlaying","    }","    ","    var body: some View {","        SquareDrumPad(","            isPressed: .constant(isActive),","            onTrigger: {","                pattern.tracks[track].steps[step].isActive.toggle()","                if pattern.tracks[track].steps[step].isActive {","                    pattern.tracks[track].steps[step].velocity = 0.8","                }","            }","        )","        .frame(width: 30, height: 30)","        .audioUIBorder(","            isCurrentStep ? .accent : (isActive ? .primary : .secondary),","            width: isCurrentStep ? 3 : 1","        )","        .opacity(isActive ? 1.0 : 0.3)","        .scaleEffect(isCurrentStep ? 1.1 : 1.0)","        .animation(.easeInOut(duration: 0.1), value: isCurrentStep)","    }","}","","struct DrumPattern {","    var name: String","    var tracks: [DrumTrack]","    var length: Int = 16","    var swing: Double = 0.0","    ","    init(name: String) {","        self.name = name","        self.tracks = Array(0..<16).map { _ in DrumTrack() }","    }","}","","struct DrumTrack {","    var steps: [DrumStep] = Array(0..<16).map { _ in DrumStep() }","    var mute: Bool = false","    var solo: Bool = false","    var volume: Double = 0.8","    var pan: Double = 0.0","}","","struct DrumStep {","    var isActive: Bool = false","    var velocity: Double = 0.8","    var probability: Double = 1.0","    var microTiming: Double = 0.0","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Step 4: Transport Controls","type":"heading","anchor":"Step-4-Transport-Controls"},{"inlineContent":[{"type":"text","text":"Create playback controls with tempo and swing:"}],"type":"paragraph"},{"code":["struct TransportControls: View {","    @Binding var isPlaying: Bool","    @Binding var isRecording: Bool","    @Binding var tempo: Double","    @Binding var swing: Double","    @Binding var currentStep: Int","    @Binding var pattern: DrumPattern","    ","    @State private var timer: Timer?","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"TRANSPORT\")","                .audioUILabel(.section)","            ","            HStack(spacing: 30) {","                \/\/ Play\/Stop Controls","                HStack(spacing: 15) {","                    \/\/ Play Button","                    CircularButton(","                        icon: isPlaying ? \"pause.fill\" : \"play.fill\",","                        isPressed: .constant(isPlaying)","                    ) {","                        togglePlayback()","                    }","                    .frame(width: 60, height: 60)","                    ","                    \/\/ Stop Button","                    CircularButton(","                        icon: \"stop.fill\",","                        isPressed: .constant(false)","                    ) {","                        stopPlayback()","                    }","                    .frame(width: 50, height: 50)","                    ","                    \/\/ Record Button","                    CircularButton(","                        icon: \"record.circle\",","                        isPressed: .constant(isRecording)","                    ) {","                        isRecording.toggle()","                    }","                    .frame(width: 50, height: 50)","                    .foregroundColor(isRecording ? .red : .primary)","                }","                ","                \/\/ Tempo Control","                VStack {","                    Text(\"TEMPO\")","                        .audioUILabel(.parameter)","                    ","                    InsetNeumorphicKnob(value: Binding(","                        get: { (tempo - 60) \/ 120 },","                        set: { tempo = 60 + $0 * 120 }","                    ))","                    .frame(width: 80, height: 80)","                    ","                    Text(\"\\(Int(tempo)) BPM\")","                        .audioUILabel(.value)","                }","                ","                \/\/ Swing Control","                VStack {","                    Text(\"SWING\")","                        .audioUILabel(.parameter)","                    ","                    InsetNeumorphicKnob(value: $swing)","                        .frame(width: 60, height: 60)","                    ","                    Text(\"\\(Int(swing * 100))%\")","                        .audioUILabel(.value)","                }","                ","                \/\/ Pattern Controls","                VStack {","                    Text(\"PATTERN\")","                        .audioUILabel(.parameter)","                    ","                    HStack(spacing: 10) {","                        RectangularButton(","                            title: \"CLEAR\",","                            isPressed: .constant(false)","                        ) {","                            clearPattern()","                        }","                        .frame(width: 60, height: 30)","                        ","                        RectangularButton(","                            title: \"COPY\",","                            isPressed: .constant(false)","                        ) {","                            copyPattern()","                        }","                        .frame(width: 60, height: 30)","                    }","                }","            }","        }","        .audioUIGroupBox()","    }","    ","    private func togglePlayback() {","        isPlaying.toggle()","        ","        if isPlaying {","            startPlayback()","        } else {","            stopTimer()","        }","    }","    ","    private func stopPlayback() {","        isPlaying = false","        isRecording = false","        currentStep = 0","        stopTimer()","    }","    ","    private func startPlayback() {","        let stepDuration = 60.0 \/ (tempo * 4) \/\/ 16th notes","        ","        timer = Timer.scheduledTimer(withTimeInterval: stepDuration, repeats: true) { _ in","            DispatchQueue.main.async {","                self.advanceStep()","            }","        }","    }","    ","    private func stopTimer() {","        timer?.invalidate()","        timer = nil","    }","    ","    private func advanceStep() {","        currentStep = (currentStep + 1) % pattern.length","        ","        \/\/ Apply swing to odd steps","        if currentStep % 2 == 1 && swing > 0 {","            let swingDelay = swing * 0.1 \/\/ Adjust swing amount","            DispatchQueue.main.asyncAfter(deadline: .now() + swingDelay) {","                \/\/ Delayed execution for swing feel","            }","        }","    }","    ","    private func clearPattern() {","        for trackIndex in 0..<pattern.tracks.count {","            for stepIndex in 0..<pattern.tracks[trackIndex].steps.count {","                pattern.tracks[trackIndex].steps[stepIndex].isActive = false","            }","        }","    }","    ","    private func copyPattern() {","        \/\/ Implement pattern copy functionality","        print(\"Pattern copied\")","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Step 5: Channel Mixer","type":"heading","anchor":"Step-5-Channel-Mixer"},{"inlineContent":[{"text":"Build individual channel controls for each drum sound:","type":"text"}],"type":"paragraph"},{"code":["struct ChannelMixer: View {","    @Binding var selectedPad: Int?","    @Binding var samples: [DrumSample]","    @Binding var pattern: DrumPattern","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"MIXER\")","                .audioUILabel(.section)","            ","            if let selectedPad = selectedPad {","                ChannelStrip(","                    channelIndex: selectedPad,","                    sample: samples[selectedPad],","                    track: $pattern.tracks[selectedPad]","                )","            } else {","                Text(\"Select a pad to edit\")","                    .foregroundColor(.secondary)","                    .frame(height: 200)","            }","        }","        .audioUIGroupBox()","    }","}","","struct ChannelStrip: View {","    let channelIndex: Int","    let sample: DrumSample","    @Binding var track: DrumTrack","    ","    @State private var lowEQ: Double = 0.0","    @State private var midEQ: Double = 0.0","    @State private var highEQ: Double = 0.0","    @State private var sendA: Double = 0.0","    @State private var sendB: Double = 0.0","    @State private var level: Double = 0.0","    ","    var body: some View {","        HStack(spacing: 30) {","            \/\/ Sample Info","            VStack {","                Text(sample.name)","                    .audioUILabel(.parameter)","                    .fontWeight(.bold)","                ","                Text(\"CH \\(channelIndex + 1)\")","                    .audioUILabel(.small)","                ","                \/\/ Sample selection button","                RectangularButton(","                    title: \"LOAD\",","                    isPressed: .constant(false)","                ) {","                    \/\/ Open sample browser","                }","                .frame(width: 60, height: 30)","            }","            ","            \/\/ EQ Section","            VStack {","                Text(\"EQ\")","                    .audioUILabel(.parameter)","                ","                HStack(spacing: 15) {","                    VStack {","                        Text(\"LOW\")","                            .audioUILabel(.small)","                        ","                        InsetNeumorphicKnob(value: Binding(","                            get: { (lowEQ + 12) \/ 24 },","                            set: { lowEQ = $0 * 24 - 12 }","                        ))","                        .frame(width: 50, height: 50)","                        ","                        Text(\"\\(Int(lowEQ)) dB\")","                            .audioUILabel(.value)","                    }","                    ","                    VStack {","                        Text(\"MID\")","                            .audioUILabel(.small)","                        ","                        InsetNeumorphicKnob(value: Binding(","                            get: { (midEQ + 12) \/ 24 },","                            set: { midEQ = $0 * 24 - 12 }","                        ))","                        .frame(width: 50, height: 50)","                        ","                        Text(\"\\(Int(midEQ)) dB\")","                            .audioUILabel(.value)","                    }","                    ","                    VStack {","                        Text(\"HIGH\")","                            .audioUILabel(.small)","                        ","                        InsetNeumorphicKnob(value: Binding(","                            get: { (highEQ + 12) \/ 24 },","                            set: { highEQ = $0 * 24 - 12 }","                        ))","                        .frame(width: 50, height: 50)","                        ","                        Text(\"\\(Int(highEQ)) dB\")","                            .audioUILabel(.value)","                    }","                }","            }","            ","            \/\/ Send Effects","            VStack {","                Text(\"SENDS\")","                    .audioUILabel(.parameter)","                ","                HStack(spacing: 15) {","                    VStack {","                        Text(\"REV\")","                            .audioUILabel(.small)","                        ","                        VerticalInsetSlider(value: $sendA)","                            .frame(width: 25, height: 80)","                        ","                        Text(\"\\(Int(sendA * 100))\")","                            .audioUILabel(.value)","                    }","                    ","                    VStack {","                        Text(\"DLY\")","                            .audioUILabel(.small)","                        ","                        VerticalInsetSlider(value: $sendB)","                            .frame(width: 25, height: 80)","                        ","                        Text(\"\\(Int(sendB * 100))\")","                            .audioUILabel(.value)","                    }","                }","            }","            ","            \/\/ Channel Controls","            VStack {","                Text(\"CHANNEL\")","                    .audioUILabel(.parameter)","                ","                HStack(spacing: 15) {","                    \/\/ Mute\/Solo","                    VStack(spacing: 8) {","                        ToggleButton(","                            title: \"MUTE\",","                            isOn: $track.mute","                        )","                        .frame(width: 50, height: 25)","                        ","                        ToggleButton(","                            title: \"SOLO\",","                            isOn: $track.solo","                        )","                        .frame(width: 50, height: 25)","                    }","                    ","                    \/\/ Pan","                    VStack {","                        Text(\"PAN\")","                            .audioUILabel(.small)","                        ","                        InsetNeumorphicKnob(value: Binding(","                            get: { (track.pan + 1) \/ 2 },","                            set: { track.pan = $0 * 2 - 1 }","                        ))","                        .frame(width: 40, height: 40)","                        ","                        Text(panLabel)","                            .audioUILabel(.value)","                    }","                    ","                    \/\/ Volume","                    VStack {","                        Text(\"VOL\")","                            .audioUILabel(.small)","                        ","                        VerticalInsetSlider(value: $track.volume)","                            .frame(width: 30, height: 80)","                        ","                        Text(\"\\(Int(track.volume * 100))\")","                            .audioUILabel(.value)","                    }","                    ","                    \/\/ Level Meter","                    VStack {","                        Text(\"LVL\")","                            .audioUILabel(.small)","                        ","                        LevelMeter(level: level)","                            .frame(width: 15, height: 80)","                    }","                }","            }","        }","        .onReceive(Timer.publish(every: 0.05, on: .main, in: .common).autoconnect()) { _ in","            \/\/ Simulate level updates","            level = track.mute ? 0.0 : Double.random(in: 0...track.volume)","        }","    }","    ","    private var panLabel: String {","        if abs(track.pan) < 0.05 {","            return \"C\"","        } else if track.pan > 0 {","            return \"R\\(Int(track.pan * 100))\"","        } else {","            return \"L\\(Int(-track.pan * 100))\"","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Step 6: Master Effects","type":"heading","anchor":"Step-6-Master-Effects"},{"inlineContent":[{"text":"Add global effects processing:","type":"text"}],"type":"paragraph"},{"code":["struct MasterEffects: View {","    @State private var reverbSend: Double = 0.2","    @State private var delaySend: Double = 0.15","    @State private var compressorThreshold: Double = 0.7","    @State private var compressorRatio: Double = 0.3","    @State private var masterVolume: Double = 0.8","    @State private var masterLeftLevel: Double = 0.0","    @State private var masterRightLevel: Double = 0.0","    ","    var body: some View {","        VStack(spacing: 20) {","            Text(\"MASTER EFFECTS\")","                .audioUILabel(.section)","            ","            HStack(spacing: 40) {","                \/\/ Reverb","                VStack {","                    Text(\"REVERB\")","                        .audioUILabel(.parameter)","                    ","                    HStack(spacing: 15) {","                        VStack {","                            Text(\"SIZE\")","                                .audioUILabel(.small)","                            ","                            InsetNeumorphicKnob(value: $reverbSend)","                                .frame(width: 50, height: 50)","                        }","                        ","                        VStack {","                            Text(\"DAMP\")","                                .audioUILabel(.small)","                            ","                            InsetNeumorphicKnob(value: .constant(0.4))","                                .frame(width: 50, height: 50)","                        }","                    }","                }","                ","                \/\/ Delay","                VStack {","                    Text(\"DELAY\")","                        .audioUILabel(.parameter)","                    ","                    HStack(spacing: 15) {","                        VStack {","                            Text(\"TIME\")","                                .audioUILabel(.small)","                            ","                            InsetNeumorphicKnob(value: $delaySend)","                                .frame(width: 50, height: 50)","                        }","                        ","                        VStack {","                            Text(\"FDBK\")","                                .audioUILabel(.small)","                            ","                            InsetNeumorphicKnob(value: .constant(0.3))","                                .frame(width: 50, height: 50)","                        }","                    }","                }","                ","                \/\/ Compressor","                VStack {","                    Text(\"COMPRESSOR\")","                        .audioUILabel(.parameter)","                    ","                    HStack(spacing: 15) {","                        VStack {","                            Text(\"THRES\")","                                .audioUILabel(.small)","                            ","                            InsetNeumorphicKnob(value: $compressorThreshold)","                                .frame(width: 50, height: 50)","                        }","                        ","                        VStack {","                            Text(\"RATIO\")","                                .audioUILabel(.small)","                            ","                            InsetNeumorphicKnob(value: $compressorRatio)","                                .frame(width: 50, height: 50)","                        }","                    }","                }","                ","                \/\/ Master Output","                VStack {","                    Text(\"MASTER\")","                        .audioUILabel(.parameter)","                    ","                    HStack(spacing: 15) {","                        VStack {","                            Text(\"L\")","                                .audioUILabel(.small)","                            ","                            LevelMeter(level: masterLeftLevel)","                                .frame(width: 20, height: 100)","                        }","                        ","                        VStack {","                            Text(\"VOL\")","                                .audioUILabel(.small)","                            ","                            VerticalInsetSlider(value: $masterVolume)","                                .frame(width: 30, height: 100)","                        }","                        ","                        VStack {","                            Text(\"R\")","                                .audioUILabel(.small)","                            ","                            LevelMeter(level: masterRightLevel)","                                .frame(width: 20, height: 100)","                        }","                    }","                }","            }","        }","        .audioUIGroupBox()","        .onReceive(Timer.publish(every: 0.05, on: .main, in: .common).autoconnect()) { _ in","            masterLeftLevel = Double.random(in: 0...masterVolume)","            masterRightLevel = Double.random(in: 0...masterVolume)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Step 7: Complete Drum Machine View","type":"heading","anchor":"Step-7-Complete-Drum-Machine-View"},{"inlineContent":[{"text":"Assemble all components into the main interface:","type":"text"}],"type":"paragraph"},{"code":["struct DrumMachineView: View {","    @State private var selectedPad: Int? = nil","    @State private var samples = DrumSample.defaultSamples","    @State private var pattern = DrumPattern(name: \"Pattern 1\")","    @State private var currentStep = 0","    @State private var isPlaying = false","    @State private var isRecording = false","    @State private var tempo: Double = 120.0","    @State private var swing: Double = 0.0","    ","    var body: some View {","        ScrollView {","            VStack(spacing: 25) {","                \/\/ Header","                Text(\"AudioUI Drum Machine\")","                    .font(.largeTitle)","                    .fontWeight(.bold)","                    .audioUIAccent()","                ","                \/\/ Transport Controls","                TransportControls(","                    isPlaying: $isPlaying,","                    isRecording: $isRecording,","                    tempo: $tempo,","                    swing: $swing,","                    currentStep: $currentStep,","                    pattern: $pattern","                )","                ","                HStack(alignment: .top, spacing: 20) {","                    VStack(spacing: 20) {","                        \/\/ Drum Pads","                        DrumPadGrid(","                            selectedPad: $selectedPad,","                            samples: $samples","                        )","                        ","                        \/\/ Pattern Sequencer","                        PatternSequencer(","                            pattern: $pattern,","                            currentStep: $currentStep,","                            isPlaying: $isPlaying","                        )","                    }","                    ","                    \/\/ Channel Mixer","                    ChannelMixer(","                        selectedPad: $selectedPad,","                        samples: $samples,","                        pattern: $pattern","                    )","                }","                ","                \/\/ Master Effects","                MasterEffects()","                ","                \/\/ Pattern Management","                PatternManager(pattern: $pattern)","            }","            .padding(20)","        }","        .audioUIBackground()","    }","}","","struct PatternManager: View {","    @Binding var pattern: DrumPattern","    @State private var patterns: [DrumPattern] = [DrumPattern(name: \"Pattern 1\")]","    @State private var selectedPatternIndex = 0","    ","    var body: some View {","        VStack(spacing: 15) {","            Text(\"PATTERN MANAGER\")","                .audioUILabel(.section)","            ","            HStack(spacing: 15) {","                \/\/ Pattern Selection","                ScrollView(.horizontal, showsIndicators: false) {","                    HStack(spacing: 10) {","                        ForEach(0..<patterns.count, id: \\.self) { index in","                            RectangularButton(","                                title: patterns[index].name,","                                isPressed: .constant(selectedPatternIndex == index)","                            ) {","                                selectedPatternIndex = index","                                pattern = patterns[index]","                            }","                            .frame(width: 80, height: 40)","                        }","                    }","                    .padding(.horizontal)","                }","                ","                \/\/ Pattern Actions","                HStack(spacing: 10) {","                    RectangularButton(","                        title: \"NEW\",","                        isPressed: .constant(false)","                    ) {","                        createNewPattern()","                    }","                    .frame(width: 50, height: 40)","                    ","                    RectangularButton(","                        title: \"COPY\",","                        isPressed: .constant(false)","                    ) {","                        copyCurrentPattern()","                    }","                    .frame(width: 50, height: 40)","                    ","                    RectangularButton(","                        title: \"DEL\",","                        isPressed: .constant(false)","                    ) {","                        deleteCurrentPattern()","                    }","                    .frame(width: 50, height: 40)","                }","            }","        }","        .audioUIGroupBox()","    }","    ","    private func createNewPattern() {","        let newPattern = DrumPattern(name: \"Pattern \\(patterns.count + 1)\")","        patterns.append(newPattern)","        selectedPatternIndex = patterns.count - 1","        pattern = newPattern","    }","    ","    private func copyCurrentPattern() {","        var copiedPattern = pattern","        copiedPattern.name = \"\\(pattern.name) Copy\"","        patterns.append(copiedPattern)","        selectedPatternIndex = patterns.count - 1","        pattern = copiedPattern","    }","    ","    private func deleteCurrentPattern() {","        guard patterns.count > 1, selectedPatternIndex < patterns.count else { return }","        patterns.remove(at: selectedPatternIndex)","        selectedPatternIndex = min(selectedPatternIndex, patterns.count - 1)","        pattern = patterns[selectedPatternIndex]","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Conclusion","type":"heading","anchor":"Conclusion"},{"inlineContent":[{"type":"text","text":"You’ve successfully built a professional drum machine interface featuring:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Velocity-sensitive drum pads"}]},{"type":"text","text":" with real-time feedback"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"16-step pattern sequencer"}]},{"type":"text","text":" with swing and velocity control"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Individual channel mixing","type":"text"}]},{"text":" with EQ and effects","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Master effects processing"}],"type":"strong"},{"text":" and output control","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Pattern management","type":"text"}],"type":"strong"},{"type":"text","text":" with save, copy, and delete functions"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Transport controls"}]},{"type":"text","text":" with tempo and playback management"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":2,"text":"Next Steps","type":"heading","anchor":"Next-Steps"},{"inlineContent":[{"type":"text","text":"To make this a fully functional drum machine:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Audio Engine Integration"}],"type":"strong"},{"text":": Connect to AVAudioEngine or AudioKit","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Sample Loading","type":"text"}]},{"type":"text","text":": Implement file browser for loading custom samples"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"MIDI Support","type":"text"}]},{"text":": Add MIDI input\/output for external control","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Effects Processing"}],"type":"strong"},{"type":"text","text":": Implement real audio effects"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Song Mode"}],"type":"strong"},{"text":": Create pattern chaining for full compositions","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Performance Features","type":"text"}]},{"type":"text","text":": Add fill patterns, mute groups, and performance effects"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"The interface you’ve built provides a solid foundation for a professional drum machine application!"}],"type":"paragraph"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"AudioUI"}],"role":"article","title":"Drum Machine Tutorial","roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"]]},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/SynthesizerTutorial","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MixerTutorial","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControlTutorial"],"title":"Complete Tutorials","anchor":"Complete-Tutorials"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumMachineTutorial"},"abstract":[{"text":"Build a complete, professional drum machine with velocity-sensitive pads and advanced pattern sequencing.","type":"text"}],"references":{"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/SynthesizerTutorial":{"abstract":[{"text":"Build a complete software synthesizer interface using AudioUI components.","type":"text"}],"url":"\/documentation\/audioui\/synthesizertutorial","title":"Synthesizer Tutorial","role":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/SynthesizerTutorial","type":"topic","kind":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/MixerTutorial":{"type":"topic","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MixerTutorial","url":"\/documentation\/audioui\/mixertutorial","abstract":[{"type":"text","text":"Build a professional audio mixer interface with channel strips, EQ, effects, and automation."}],"title":"Mixer Tutorial","kind":"article","role":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI/MotionControlTutorial":{"role":"article","type":"topic","abstract":[{"text":"Build motion-responsive audio interfaces using device sensors and gesture controls.","type":"text"}],"title":"Motion Control Tutorial","url":"\/documentation\/audioui\/motioncontroltutorial","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControlTutorial","kind":"article"}}}