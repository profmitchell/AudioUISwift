{"metadata":{"role":"article","modules":[{"name":"AudioUI"}],"title":"Sliders","roleHeading":"Article"},"identifier":{"url":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Sliders","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Knobs","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/XYPads","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide"],"title":"Related Documentation","anchor":"Related-Documentation"},{"generated":true,"identifiers":["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Buttons","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Knobs","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumPads","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/XYPads","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControls","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Displays","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/GroupComponents"],"title":"Component Library","anchor":"Component-Library"}],"abstract":[{"text":"Linear control components for precise parameter adjustment with professional fader behavior.","type":"text"}],"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"AudioUI sliders provide linear control over continuous parameters, perfect for volume faders, crossfaders, balance controls, and any parameter that benefits from linear visual representation. Each slider type offers authentic feel with proper curves, detents, and gesture recognition.","type":"text"}]},{"type":"heading","text":"Slider Types","level":2,"anchor":"Slider-Types"},{"type":"heading","text":"VerticalInsetSlider","level":3,"anchor":"VerticalInsetSlider"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Professional vertical fader perfect for mixing consoles and level controls:"}]},{"type":"codeListing","code":["import SwiftUI","import AudioUI","","struct MixerChannelStrip: View {","    @State private var channelLevel: Double = 0.75","    @State private var auxSend1: Double = 0.0","    @State private var auxSend2: Double = 0.0","    @State private var panPosition: Double = 0.5","    ","    var body: some View {","        VStack(spacing: 15) {","            \/\/ Aux sends","            HStack(spacing: 12) {","                VStack {","                    Text(\"AUX 1\")","                        .font(.caption2)","                    VerticalInsetSlider(value: $auxSend1)","                        .frame(width: 20, height: 80)","                }","                ","                VStack {","                    Text(\"AUX 2\")","                        .font(.caption2)","                    VerticalInsetSlider(value: $auxSend2)","                        .frame(width: 20, height: 80)","                }","            }","            ","            \/\/ Main fader","            VStack {","                Text(\"LEVEL\")","                    .font(.caption)","                    .fontWeight(.medium)","                ","                VerticalInsetSlider(value: $channelLevel)","                    .frame(width: 30, height: 200)","                ","                Text(\"\\(Int((channelLevel - 1.0) * 60)) dB\")","                    .font(.caption2)","                    .foregroundColor(.secondary)","            }","            ","            \/\/ Pan control","            VStack {","                Text(\"PAN\")","                    .font(.caption2)","                HorizontalInsetSlider(value: $panPosition)","                    .frame(width: 60, height: 20)","                Text(panPosition < 0.4 ? \"L\" : panPosition > 0.6 ? \"R\" : \"C\")","                    .font(.caption2)","            }","        }","        .theme(.audioUIMinimal)","        .padding()","    }","}"],"syntax":"swift"},{"type":"heading","text":"HorizontalFader","level":3,"anchor":"HorizontalFader"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Horizontal sliders ideal for crossfaders, balance controls, and compact interfaces:"}]},{"type":"codeListing","code":["struct CrossfaderInterface: View {","    @State private var crossfaderPosition: Double = 0.5","    @State private var masterVolume: Double = 0.8","    @State private var cueLevel: Double = 0.6","    ","    var body: some View {","        VStack(spacing: 25) {","            \/\/ Master controls","            HStack(spacing: 30) {","                VStack {","                    Text(\"MASTER\")","                        .font(.caption)","                        .fontWeight(.bold)","                    ","                    HorizontalFader(value: $masterVolume)","                        .frame(width: 150, height: 30)","                    ","                    Text(\"\\(Int(masterVolume * 100))%\")","                        .font(.caption2)","                }","                ","                VStack {","                    Text(\"CUE\")","                        .font(.caption)","                        .fontWeight(.bold)","                    ","                    HorizontalFader(value: $cueLevel)","                        .frame(width: 100, height: 25)","                    ","                    Text(\"\\(Int(cueLevel * 100))%\")","                        .font(.caption2)","                }","            }","            ","            \/\/ Crossfader","            VStack {","                Text(\"CROSSFADER\")","                    .font(.caption)","                    .fontWeight(.bold)","                ","                HorizontalFader(value: $crossfaderPosition)","                    .frame(width: 200, height: 40)","                    .snapToDetents([0.5]) \/\/ Center detent","                ","                HStack {","                    Text(\"A\")","                        .font(.caption)","                        .foregroundColor(crossfaderPosition < 0.3 ? .blue : .secondary)","                    ","                    Spacer()","                    ","                    Text(\"CENTER\")","                        .font(.caption2)","                        .foregroundColor(abs(crossfaderPosition - 0.5) < 0.1 ? .green : .secondary)","                    ","                    Spacer()","                    ","                    Text(\"B\")","                        .font(.caption)","                        .foregroundColor(crossfaderPosition > 0.7 ? .red : .secondary)","                }","                .frame(width: 200)","            }","        }","        .theme(.audioUINeumorphic)","    }","}"],"syntax":"swift"},{"type":"heading","text":"CircularSlider","level":3,"anchor":"CircularSlider"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Circular sliders for compact parameter control:"}]},{"type":"codeListing","code":["struct CompactEffectControls: View {","    @State private var effectMix: Double = 0.5","    @State private var feedbackAmount: Double = 0.3","    @State private var modulationRate: Double = 0.7","    ","    var body: some View {","        HStack(spacing: 25) {","            circularControl(\"MIX\", value: $effectMix, color: .blue)","            circularControl(\"FEEDBACK\", value: $feedbackAmount, color: .orange)","            circularControl(\"RATE\", value: $modulationRate, color: .green)","        }","        .theme(.audioUINeumorphic)","    }","    ","    private func circularControl(","        _ label: String,","        value: Binding<Double>,","        color: Color","    ) -> some View {","        VStack(spacing: 8) {","            Text(label)","                .font(.caption)","                .fontWeight(.medium)","            ","            CircularSlider(value: value)","                .frame(width: 60, height: 60)","                .accentColor(color)","            ","            Text(\"\\(Int(value.wrappedValue * 100))%\")","                .font(.caption2)","                .foregroundColor(.secondary)","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Slider Behavior","level":2,"anchor":"Slider-Behavior"},{"type":"heading","text":"Fader Curves","level":3,"anchor":"Fader-Curves"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Different parameter types require different response curves:"}]},{"type":"codeListing","code":["struct FaderCurveExample: View {","    @State private var linearValue: Double = 0.5","    @State private var audioValue: Double = 0.5","    @State private var exponentialValue: Double = 0.5","    ","    var body: some View {","        HStack(spacing: 30) {","            \/\/ Linear response","            VStack {","                Text(\"LINEAR\")","                VerticalInsetSlider(value: $linearValue)","                    .frame(width: 25, height: 150)","                Text(\"\\(Int(linearValue * 100))%\")","                    .font(.caption2)","            }","            ","            \/\/ Audio taper (logarithmic)","            VStack {","                Text(\"AUDIO\")","                VerticalInsetSlider(value: Binding(","                    get: { ","                        \/\/ Convert dB to slider position","                        let db = 20 * log10(max(audioValue, 0.001))","                        return (db + 60) \/ 60 \/\/ -60dB to 0dB range","                    },","                    set: { ","                        \/\/ Convert slider position to linear amplitude","                        let db = ($0 * 60) - 60","                        audioValue = pow(10, db \/ 20)","                    }","                ))","                .frame(width: 25, height: 150)","                Text(\"\\(20 * log10(max(audioValue, 0.001)), specifier: \"%.1f\") dB\")","                    .font(.caption2)","            }","            ","            \/\/ Exponential response","            VStack {","                Text(\"EXP\")","                VerticalInsetSlider(value: Binding(","                    get: { sqrt(exponentialValue) },","                    set: { exponentialValue = $0 * $0 }","                ))","                .frame(width: 25, height: 150)","                Text(\"\\(Int(exponentialValue * 100))%\")","                    .font(.caption2)","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Detents and Snapping","level":3,"anchor":"Detents-and-Snapping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sliders can snap to important values:"}]},{"type":"codeListing","code":["struct DetentExample: View {","    @State private var gainValue: Double = 0.5 \/\/ Represents 0dB","    ","    var body: some View {","        VStack {","            Text(\"GAIN CONTROL\")","                .font(.caption)","                .fontWeight(.bold)","            ","            VerticalInsetSlider(value: $gainValue)","                .frame(width: 30, height: 200)","                .snapToDetents([","                    0.0,   \/\/ -inf dB (mute)","                    0.1,   \/\/ -20 dB","                    0.25,  \/\/ -12 dB","                    0.375, \/\/ -6 dB","                    0.5,   \/\/ 0 dB (unity)","                    0.625, \/\/ +6 dB","                    0.75,  \/\/ +12 dB","                    1.0    \/\/ +20 dB","                ])","                .hapticFeedback(.light)","            ","            let db = gainValue == 0 ? -Double.infinity : 20 * log10(gainValue * 2)","            Text(gainValue == 0 ? \"MUTE\" : \"\\(db, specifier: \"%.1f\") dB\")","                .font(.caption2)","                .foregroundColor(.secondary)","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Advanced Slider Features","level":2,"anchor":"Advanced-Slider-Features"},{"type":"heading","text":"Range Sliders","level":3,"anchor":"Range-Sliders"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Control minimum and maximum values simultaneously:"}]},{"type":"codeListing","code":["struct RangeSliderExample: View {","    @State private var frequencyRange: ClosedRange<Double> = 200...2000","    @State private var dynamicRange: ClosedRange<Double> = -40...0","    ","    var body: some View {","        VStack(spacing: 25) {","            \/\/ Frequency range for bandpass filter","            VStack {","                Text(\"BANDPASS FILTER\")","                    .font(.caption)","                    .fontWeight(.bold)","                ","                HorizontalRangeSlider(","                    range: Binding(","                        get: { ","                            let min = log10(frequencyRange.lowerBound \/ 20) \/ log10(20000 \/ 20)","                            let max = log10(frequencyRange.upperBound \/ 20) \/ log10(20000 \/ 20)","                            return min...max","                        },","                        set: { ","                            let minFreq = 20 * pow(20000 \/ 20, $0.lowerBound)","                            let maxFreq = 20 * pow(20000 \/ 20, $0.upperBound)","                            frequencyRange = minFreq...maxFreq","                        }","                    )","                )","                .frame(width: 200, height: 30)","                ","                Text(\"\\(Int(frequencyRange.lowerBound)) - \\(Int(frequencyRange.upperBound)) Hz\")","                    .font(.caption2)","            }","            ","            \/\/ Dynamic range for compressor","            VStack {","                Text(\"DYNAMIC RANGE\")","                    .font(.caption)","                    .fontWeight(.bold)","                ","                HorizontalRangeSlider(","                    range: Binding(","                        get: { ","                            ((dynamicRange.lowerBound + 60) \/ 60)...((dynamicRange.upperBound + 60) \/ 60)","                        },","                        set: { ","                            dynamicRange = (($0.lowerBound * 60) - 60)...(($0.upperBound * 60) - 60)","                        }","                    )","                )","                .frame(width: 200, height: 30)","                ","                Text(\"\\(dynamicRange.lowerBound, specifier: \"%.0f\") to \\(dynamicRange.upperBound, specifier: \"%.0f\") dB\")","                    .font(.caption2)","            }","        }","        .theme(.audioUIMinimal)","    }","}"],"syntax":"swift"},{"type":"heading","text":"Motorized Faders","level":3,"anchor":"Motorized-Faders"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Faders that can be automated or reset programmatically:"}]},{"type":"codeListing","code":["struct MotorizedFaderExample: View {","    @State private var currentValue: Double = 0.5","    @State private var automationValue: Double = 0.5","    @State private var isAutomationActive = false","    ","    var body: some View {","        VStack {","            Text(\"MOTORIZED FADER\")","                .font(.caption)","                .fontWeight(.bold)","            ","            VerticalInsetSlider(","                value: isAutomationActive ? $automationValue : $currentValue","            )","            .frame(width: 30, height: 200)","            .disabled(isAutomationActive)","            .opacity(isAutomationActive ? 0.7 : 1.0)","            ","            HStack {","                Button(\"AUTOMATION\") {","                    withAnimation(.easeInOut(duration: 0.5)) {","                        isAutomationActive.toggle()","                        if isAutomationActive {","                            automationValue = currentValue","                            startAutomation()","                        }","                    }","                }","                .foregroundColor(isAutomationActive ? .green : .primary)","                ","                Button(\"RESET\") {","                    withAnimation(.easeInOut(duration: 0.3)) {","                        currentValue = 0.5","                        automationValue = 0.5","                    }","                }","            }","            .font(.caption)","        }","    }","    ","    private func startAutomation() {","        \/\/ Simulate automation movement","        Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { timer in","            if !isAutomationActive {","                timer.invalidate()","                return","            }","            ","            withAnimation(.linear(duration: 0.1)) {","                automationValue = 0.5 + 0.3 * sin(Date().timeIntervalSince1970 * 2)","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Integration Examples","level":2,"anchor":"Integration-Examples"},{"type":"heading","text":"Professional DAW Channel Strip","level":3,"anchor":"Professional-DAW-Channel-Strip"},{"type":"codeListing","code":["struct DAWChannelStrip: View {","    @ObservedObject var channel: DAWChannel","    ","    var body: some View {","        VStack(spacing: 12) {","            \/\/ Channel identification","            Text(\"CH \\(channel.number)\")","                .font(.caption)","                .fontWeight(.bold)","                .padding(.horizontal, 8)","                .padding(.vertical, 4)","                .background(Color(.systemGray5))","                .cornerRadius(4)","            ","            \/\/ Input gain","            VStack(spacing: 4) {","                Text(\"GAIN\")","                    .font(.system(size: 8))","                VerticalInsetSlider(value: Binding(","                    get: { (channel.inputGain + 20) \/ 40 }, \/\/ -20 to +20 dB","                    set: { channel.inputGain = ($0 * 40) - 20 }","                ))","                .frame(width: 15, height: 60)","                Text(\"\\(channel.inputGain, specifier: \"%.0f\")\")","                    .font(.system(size: 8))","            }","            ","            \/\/ Aux sends","            VStack(spacing: 8) {","                Text(\"AUX\")","                    .font(.system(size: 8))","                ","                ForEach(0..<4) { auxIndex in","                    VerticalInsetSlider(value: $channel.auxSends[auxIndex])","                        .frame(width: 12, height: 40)","                }","            }","            ","            \/\/ Pan control","            VStack(spacing: 4) {","                Text(\"PAN\")","                    .font(.system(size: 8))","                HorizontalInsetSlider(value: $channel.panPosition)","                    .frame(width: 40, height: 12)","                    .snapToDetents([0.5])","            }","            ","            \/\/ Main fader","            VStack(spacing: 8) {","                Text(\"LEVEL\")","                    .font(.system(size: 8))","                ","                VerticalInsetSlider(value: Binding(","                    get: { channel.faderLevel },","                    set: { channel.faderLevel = $0 }","                ))","                .frame(width: 25, height: 150)","                .snapToDetents([0.0, 0.75]) \/\/ Unity gain detent","                ","                Text(\"\\(20 * log10(max(channel.faderLevel, 0.001)), specifier: \"%.0f\")\")","                    .font(.system(size: 8))","            }","            ","            \/\/ Mute and Solo buttons","            HStack(spacing: 4) {","                Button(\"M\") {","                    channel.isMuted.toggle()","                }","                .frame(width: 20, height: 15)","                .font(.system(size: 8))","                .foregroundColor(channel.isMuted ? .white : .primary)","                .background(channel.isMuted ? .red : Color(.systemGray4))","                .cornerRadius(2)","                ","                Button(\"S\") {","                    channel.isSoloed.toggle()","                }","                .frame(width: 20, height: 15)","                .font(.system(size: 8))","                .foregroundColor(channel.isSoloed ? .black : .primary)","                .background(channel.isSoloed ? .yellow : Color(.systemGray4))","                .cornerRadius(2)","            }","        }","        .frame(width: 60)","        .theme(.audioUIMinimal)","    }","}"],"syntax":"swift"},{"type":"heading","text":"DJ Mixer Interface","level":3,"anchor":"DJ-Mixer-Interface"},{"type":"codeListing","code":["struct DJMixerInterface: View {","    @State private var channel1Level: Double = 0.8","    @State private var channel2Level: Double = 0.8","    @State private var crossfaderPosition: Double = 0.5","    @State private var masterLevel: Double = 0.9","    @State private var cueLevel: Double = 0.6","    ","    var body: some View {","        HStack(spacing: 30) {","            \/\/ Channel 1","            djChannel(","                \"CHANNEL 1\",","                level: $channel1Level,","                color: .blue","            )","            ","            \/\/ Crossfader section","            VStack(spacing: 20) {","                Text(\"CROSSFADER\")","                    .font(.caption)","                    .fontWeight(.bold)","                ","                HorizontalFader(value: $crossfaderPosition)","                    .frame(width: 200, height: 40)","                    .snapToDetents([0.5])","                ","                HStack {","                    Text(\"A\")","                        .foregroundColor(.blue)","                    Spacer()","                    Text(\"B\")","                        .foregroundColor(.red)","                }","                .frame(width: 200)","                .font(.caption)","                ","                \/\/ Master controls","                HStack(spacing: 25) {","                    VStack {","                        Text(\"MASTER\")","                            .font(.caption)","                        VerticalInsetSlider(value: $masterLevel)","                            .frame(width: 30, height: 100)","                    }","                    ","                    VStack {","                        Text(\"CUE\")","                            .font(.caption)","                        VerticalInsetSlider(value: $cueLevel)","                            .frame(width: 25, height: 80)","                    }","                }","            }","            ","            \/\/ Channel 2","            djChannel(","                \"CHANNEL 2\",","                level: $channel2Level,","                color: .red","            )","        }","        .theme(.audioUINeumorphic)","        .padding(30)","    }","    ","    private func djChannel(","        _ title: String,","        level: Binding<Double>,","        color: Color","    ) -> some View {","        VStack(spacing: 15) {","            Text(title)","                .font(.caption)","                .fontWeight(.bold)","                .foregroundColor(color)","            ","            \/\/ Channel fader","            VerticalInsetSlider(value: level)","                .frame(width: 30, height: 200)","                .accentColor(color)","            ","            Text(\"\\(Int(level.wrappedValue * 100))%\")","                .font(.caption2)","                .foregroundColor(.secondary)","        }","    }","}"],"syntax":"swift"}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI"],["doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents"]]},"variants":[{"paths":["\/documentation\/audioui\/sliders"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","references":{"doc://audiouiswift.AudioUI/documentation/AudioUI/ThemingGuide":{"title":"Theming Guide","role":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/ThemingGuide","kind":"article","abstract":[{"text":"Master AudioUI’s powerful theming system to create stunning, branded audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/themingguide","type":"topic"},"doc://audiouiswift.AudioUI/documentation/AudioUI/Knobs":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Professional rotary controls with authentic hardware behavior and stunning visual design."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Knobs","url":"\/documentation\/audioui\/knobs","title":"Knobs"},"doc://audiouiswift.AudioUI/documentation/AudioUI/Buttons":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Tactile button components for audio interface controls with professional behavior and styling."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Buttons","url":"\/documentation\/audioui\/buttons","title":"Buttons"},"doc://audiouiswift.AudioUI/documentation/AudioUI/Displays":{"abstract":[{"text":"Visual feedback components for displaying audio levels, status information, and real-time data in professional audio interfaces.","type":"text"}],"url":"\/documentation\/audioui\/displays","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/Displays","title":"Display Components","role":"collectionGroup","type":"topic","kind":"article"},"doc://audiouiswift.AudioUI/documentation/AudioUI":{"kind":"symbol","abstract":[{"type":"text","text":"The ultimate SwiftUI framework for professional audio interface development."}],"identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI","role":"collection","type":"topic","title":"AudioUI","url":"\/documentation\/audioui"},"doc://audiouiswift.AudioUI/documentation/AudioUI/XYPads":{"role":"article","type":"topic","abstract":[{"text":"Two-dimensional control surfaces for spatial parameter manipulation and expressive audio control.","type":"text"}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/XYPads","url":"\/documentation\/audioui\/xypads","title":"XYPads"},"doc://audiouiswift.AudioUI/documentation/AudioUI/MotionControls":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Gesture-based and motion-sensitive controls for expressive audio interfaces."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/MotionControls","url":"\/documentation\/audioui\/motioncontrols","title":"MotionControls"},"doc://audiouiswift.AudioUI/documentation/AudioUI/AudioUIComponents":{"role":"collectionGroup","type":"topic","title":"AudioUIComponents","url":"\/documentation\/audioui\/audiouicomponents","abstract":[{"type":"text","text":"Production-ready audio interface components with hardware-inspired design and real-time performance."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/AudioUIComponents"},"doc://audiouiswift.AudioUI/documentation/AudioUI/DrumPads":{"role":"article","type":"topic","abstract":[{"type":"text","text":"Velocity-sensitive percussion controls for drum machines, samplers, and rhythmic interfaces."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/DrumPads","url":"\/documentation\/audioui\/drumpads","title":"DrumPads"},"doc://audiouiswift.AudioUI/documentation/AudioUI/GroupComponents":{"role":"collectionGroup","type":"topic","abstract":[{"type":"text","text":"Container and layout components for organizing audio interface elements into logical groups and hierarchical structures."}],"kind":"article","identifier":"doc:\/\/audiouiswift.AudioUI\/documentation\/AudioUI\/GroupComponents","url":"\/documentation\/audioui\/groupcomponents","title":"Group Components"}}}